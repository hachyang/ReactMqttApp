{"ast":null,"code":"import _classCallCheck from\"/home/r1701/Downloads/react-mqtt-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/r1701/Downloads/react-mqtt-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/home/r1701/Downloads/react-mqtt-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/r1701/Downloads/react-mqtt-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";/* This is where the uibuilder action happens */import React,{Component}from'react';//import ReactDOM from 'react-dom';\n//import { findDOMNode } from 'react-dom';\nimport uibuilder from'node-red-contrib-uibuilder/front-end/src/uibuilderfe';var UserData=/*#__PURE__*/function(_Component){_inherits(UserData,_Component);var _super=_createSuper(UserData);function UserData(props){var _this;_classCallCheck(this,UserData);_this=_super.call(this,props);/** **REQUIRED** Start uibuilder comms with Node-RED @since v2.0.0-dev3\n         * Pass the namespace and ioPath variables if hosting page is not in the instance root folder\n         * e.g. If you get continual `uibuilderfe:ioSetup: SOCKET CONNECT ERROR` error messages.\n         * e.g. uibuilder.start('/nr/uib', '/nr/uibuilder/vendor/socket.io') // change to use your paths/names\n         */uibuilder.start();_this.state={// Example of retrieving data from uibuilder\nfeVersion:uibuilder.get('version'),socketConnectedState:false,serverTimeOffset:'[unknown]',msgRecvd:{topic:\"192.168.0.35\",payload:\"FP560_123456\",_socketId:\"kkkop\",_msgid:\"977yhh\"},msgsReceived:0,msgCtrl:'[Nothing]',msgsControl:0,msgSent:'[Nothing]',msgsSent:0,msgCtrlSent:'[Nothing]',msgsCtrlSent:0};/** You can use the following to help trace how messages flow back and forth.\n         * You can then amend this processing to suite your requirements.\n         */ //#region ---- Trace Received Messages ---- //\n// If msg changes - msg is updated when a standard msg is received from Node-RED over Socket.IO\n// newVal relates to the attribute being listened to.\nuibuilder.onChange('msg',function(newVal){_this.setState({'msgRecvd':newVal});var _JSON$parse=JSON.parse(JSON.stringify(newVal)),ip=_JSON$parse.ip,payload=_JSON$parse.payload;_this.props.handleMsgReceived(payload.toString(),ip.toString());console.info('[uibuilder.onChange] msg received from Node-RED server:',newVal);});// As we receive new messages, we get an updated count as well\nuibuilder.onChange('msgsReceived',function(newVal){console.info('[uibuilder.onChange] Updated count of received msgs:',newVal);_this.setState({'msgsReceived':newVal});});// If we receive a control message from Node-RED, we can get the new data here - we pass it to a Vue variable\nuibuilder.onChange('ctrlMsg',function(newVal){console.info('[uibuilder.onChange:ctrlMsg] CONTROL msg received from Node-RED server:',newVal);_this.setState({'msgCtrl':newVal});});// Updated count of control messages received\nuibuilder.onChange('msgsCtrl',function(newVal){console.info('[uibuilder.onChange:msgsCtrl] Updated count of received CONTROL msgs:',newVal);_this.setState({'msgsControl':newVal});});//#endregion ---- End of Trace Received Messages ---- //\n//#region ---- Trace Sent Messages ---- //\n// You probably only need these to help you understand the order of processing //\n// If a message is sent back to Node-RED, we can grab a copy here if we want to\nuibuilder.onChange('sentMsg',function(newVal){console.info('[uibuilder.onChange:sentMsg] msg sent to Node-RED server:',newVal);_this.setState({'msgSent':newVal});});// Updated count of sent messages\nuibuilder.onChange('msgsSent',function(newVal){console.info('[uibuilder.onChange:msgsSent] Updated count of msgs sent:',newVal);_this.setState({'msgsSent':newVal});});// If we send a control message to Node-RED, we can get a copy of it here\nuibuilder.onChange('sentCtrlMsg',function(newVal){console.info('[uibuilder.onChange:sentCtrlMsg] Control message sent to Node-RED server:',newVal);_this.setState({'msgCtrlSent':newVal});});// And we can get an updated count\nuibuilder.onChange('msgsSentCtrl',function(newVal){console.info('[uibuilder.onChange:msgsSentCtrl] Updated count of CONTROL msgs sent:',newVal);_this.setState({'msgsCtrlSent':newVal});});//#endregion ---- End of Trace Sent Messages ---- //\n// If Socket.IO connects/disconnects, we get true/false here\nuibuilder.onChange('ioConnected',function(newVal){console.info('[uibuilder.onChange:ioConnected] Socket.IO Connection Status Changed to:',newVal);_this.setState({'socketConnectedState':newVal});});// If Server Time Offset changes\nuibuilder.onChange('serverTimeOffset',function(newVal){console.info('[uibuilder.onChange:serverTimeOffset] Offset of time between the browser and the server has changed to:',newVal);_this.setState({'serverTimeOffset':newVal});});//Manually send a message back to Node-RED after 2 seconds\nwindow.setTimeout(function(){console.info('Sending a message back to Node-RED-after2sdelay');uibuilder.send({'topic':'uibuilderfe','payload':'I am a message sent from the uibuilder front end'});},2000);return _this;}_createClass(UserData,[{key:\"componentDidMount\",value:function componentDidMount(){this.props.handleMsgReceived(this.state.msgRecvd.payload,this.state.msgRecvd.topic);}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",{ref:\"root\",style:{height:\"50vh\"}},/*#__PURE__*/React.createElement(\"h1\",null,\"Waiting for device information...\"),/*#__PURE__*/React.createElement(\"hr\",null),/*#__PURE__*/React.createElement(\"div\",{className:\"d1\"},/*#__PURE__*/React.createElement(\"div\",null,\"Last msg Received:\"),/*#__PURE__*/React.createElement(\"pre\",null,/*#__PURE__*/React.createElement(\"code\",null,JSON.stringify(this.state.msgRecvd,null,2))),/*#__PURE__*/React.createElement(\"div\",null,\"# Msgs Received: \",this.state.msgsReceived)),/*#__PURE__*/React.createElement(\"div\",{className:\"d1\"},/*#__PURE__*/React.createElement(\"div\",null,\"last Ctl Msg Received:\"),/*#__PURE__*/React.createElement(\"pre\",null,/*#__PURE__*/React.createElement(\"code\",null,JSON.stringify(this.state.msgCtrl,null,2))),/*#__PURE__*/React.createElement(\"div\",null,\"# Control Msgs Received: \",this.state.msgsControl)),/*#__PURE__*/React.createElement(\"div\",{className:\"d1\"},/*#__PURE__*/React.createElement(\"div\",null,\"last Msg Sent\"),/*#__PURE__*/React.createElement(\"pre\",null,/*#__PURE__*/React.createElement(\"code\",null,JSON.stringify(this.state.msgSent,null,2))),/*#__PURE__*/React.createElement(\"div\",null,\"# msgs Sent: \",this.state.msgsSent)),/*#__PURE__*/React.createElement(\"div\",{className:\"d1\"},/*#__PURE__*/React.createElement(\"div\",null,\"Socket Connected?: \",this.state.socketConnectedState),/*#__PURE__*/React.createElement(\"div\",null,\"uibuilderfe Version: \",this.state.feVersion),/*#__PURE__*/React.createElement(\"div\",null,\"Server Time Offset from browser: \",this.state.serverTimeOffset)));}}]);return UserData;}(Component);export default UserData;","map":{"version":3,"sources":["/home/r1701/Downloads/react-mqtt-master/src/scenes/UserData.js"],"names":["React","Component","uibuilder","UserData","props","start","state","feVersion","get","socketConnectedState","serverTimeOffset","msgRecvd","topic","payload","_socketId","_msgid","msgsReceived","msgCtrl","msgsControl","msgSent","msgsSent","msgCtrlSent","msgsCtrlSent","onChange","newVal","setState","JSON","parse","stringify","ip","handleMsgReceived","toString","console","info","window","setTimeout","send","height"],"mappings":"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","sourcesContent":["/* This is where the uibuilder action happens */\nimport React, {Component} from 'react';\n//import ReactDOM from 'react-dom';\n//import { findDOMNode } from 'react-dom';\n\nimport uibuilder from 'node-red-contrib-uibuilder/front-end/src/uibuilderfe'\n\nclass UserData extends Component {\n    constructor(props) {\n        super(props)\n\n        /** **REQUIRED** Start uibuilder comms with Node-RED @since v2.0.0-dev3\n         * Pass the namespace and ioPath variables if hosting page is not in the instance root folder\n         * e.g. If you get continual `uibuilderfe:ioSetup: SOCKET CONNECT ERROR` error messages.\n         * e.g. uibuilder.start('/nr/uib', '/nr/uibuilder/vendor/socket.io') // change to use your paths/names\n         */\n        uibuilder.start();\n\n        this.state = {\n            // Example of retrieving data from uibuilder\n            feVersion: uibuilder.get('version'),\n\n            socketConnectedState: false,\n            serverTimeOffset: '[unknown]',\n\n            msgRecvd:  {topic: \"192.168.0.35\", payload:\"FP560_123456\",_socketId:\"kkkop\",_msgid: \"977yhh\"},\n            msgsReceived: 0,\n            msgCtrl: '[Nothing]',\n            msgsControl: 0,\n\n            msgSent: '[Nothing]',\n            msgsSent: 0,\n            msgCtrlSent: '[Nothing]',\n            msgsCtrlSent: 0,\n        }\n\n        /** You can use the following to help trace how messages flow back and forth.\n         * You can then amend this processing to suite your requirements.\n         */\n\n        //#region ---- Trace Received Messages ---- //\n        // If msg changes - msg is updated when a standard msg is received from Node-RED over Socket.IO\n        // newVal relates to the attribute being listened to.\n        uibuilder.onChange('msg', (newVal) => {\n\n            this.setState({'msgRecvd': newVal});\n            const {ip, payload} = JSON.parse(JSON.stringify(newVal));\n            this.props.handleMsgReceived(payload.toString(),ip.toString());\n            console.info('[uibuilder.onChange] msg received from Node-RED server:', newVal);\n        })\n\n        // As we receive new messages, we get an updated count as well\n        uibuilder.onChange('msgsReceived', (newVal) => {\n            console.info('[uibuilder.onChange] Updated count of received msgs:', newVal);\n\n            this.setState({'msgsReceived': newVal});\n\n        })\n\n        // If we receive a control message from Node-RED, we can get the new data here - we pass it to a Vue variable\n        uibuilder.onChange('ctrlMsg', (newVal) => {\n            console.info('[uibuilder.onChange:ctrlMsg] CONTROL msg received from Node-RED server:', newVal);\n\n            this.setState({'msgCtrl': newVal});\n        })\n        // Updated count of control messages received\n        uibuilder.onChange('msgsCtrl', (newVal) => {\n            console.info('[uibuilder.onChange:msgsCtrl] Updated count of received CONTROL msgs:', newVal);\n\n            this.setState({'msgsControl': newVal});\n        })\n        //#endregion ---- End of Trace Received Messages ---- //\n\n        //#region ---- Trace Sent Messages ---- //\n        // You probably only need these to help you understand the order of processing //\n        // If a message is sent back to Node-RED, we can grab a copy here if we want to\n        uibuilder.onChange('sentMsg', (newVal) => {\n            console.info('[uibuilder.onChange:sentMsg] msg sent to Node-RED server:', newVal);\n\n            this.setState({'msgSent': newVal});\n        })\n        // Updated count of sent messages\n        uibuilder.onChange('msgsSent', (newVal) => {\n            console.info('[uibuilder.onChange:msgsSent] Updated count of msgs sent:', newVal);\n\n            this.setState({'msgsSent': newVal});\n        })\n\n        // If we send a control message to Node-RED, we can get a copy of it here\n        uibuilder.onChange('sentCtrlMsg', (newVal) => {\n            console.info('[uibuilder.onChange:sentCtrlMsg] Control message sent to Node-RED server:', newVal);\n\n            this.setState({'msgCtrlSent': newVal});\n        })\n        // And we can get an updated count\n        uibuilder.onChange('msgsSentCtrl', (newVal) => {\n            console.info('[uibuilder.onChange:msgsSentCtrl] Updated count of CONTROL msgs sent:', newVal);\n\n            this.setState({'msgsCtrlSent': newVal});\n        })\n        //#endregion ---- End of Trace Sent Messages ---- //\n\n        // If Socket.IO connects/disconnects, we get true/false here\n        uibuilder.onChange('ioConnected', (newVal) => {\n            console.info('[uibuilder.onChange:ioConnected] Socket.IO Connection Status Changed to:', newVal)\n\n            this.setState({'socketConnectedState': newVal})\n        })\n        // If Server Time Offset changes\n        uibuilder.onChange('serverTimeOffset', (newVal) => {\n            console.info('[uibuilder.onChange:serverTimeOffset] Offset of time between the browser and the server has changed to:', newVal)\n\n            this.setState({'serverTimeOffset': newVal})\n        })\n\n        //Manually send a message back to Node-RED after 2 seconds\n        window.setTimeout(function () {\n            console.info('Sending a message back to Node-RED-after2sdelay')\n            uibuilder.send({'topic': 'uibuilderfe', 'payload': 'I am a message sent from the uibuilder front end'})\n        }, 2000)\n    }\n\n    componentDidMount() {\n        this.props.handleMsgReceived(this.state.msgRecvd.payload,this.state.msgRecvd.topic);\n    }\n\n    render() {\n        return (\n\n            <div ref=\"root\" style={{height: \"50vh\"}}>\n                <h1>Waiting for device information...</h1>\n                <hr></hr>\n                <div className=\"d1\">\n                    <div>Last msg Received:</div>\n                    <pre><code>{JSON.stringify(this.state.msgRecvd, null, 2)}</code></pre>\n                    <div># Msgs Received: {this.state.msgsReceived}</div>\n                </div>\n\n                <div className=\"d1\">\n                    <div>last Ctl Msg Received:</div>\n                    <pre><code>{JSON.stringify(this.state.msgCtrl, null, 2)}</code></pre>\n                    <div># Control Msgs Received: {this.state.msgsControl}</div>\n                </div>\n\n                <div className=\"d1\">\n                    <div>last Msg Sent</div>\n                    <pre><code>{JSON.stringify(this.state.msgSent, null, 2)}</code></pre>\n                    <div># msgs Sent: {this.state.msgsSent}</div>\n                </div>\n\n                <div className=\"d1\">\n                    <div>Socket Connected?: {this.state.socketConnectedState}</div>\n                    <div>uibuilderfe Version: {this.state.feVersion}</div>\n                    <div>Server Time Offset from browser: {this.state.serverTimeOffset}</div>\n                </div>\n\n            </div>\n        );\n\n    }\n\n}\n\nexport default UserData\n\n\n"]},"metadata":{},"sourceType":"module"}