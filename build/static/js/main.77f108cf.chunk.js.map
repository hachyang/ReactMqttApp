{"version":3,"sources":["components/Hook/Connection.js","components/Hook/Publisher.js","components/Hook/Subscriber.js","components/Hook/Receiver.js","components/Hook/index.js","scenes/UserData.js","App.js","serviceWorker.js","index.js"],"names":["Connection","connect","disconnect","connectBtn","Form","useForm","form","record","host","clientId","Math","random","toString","substr","port","ConnectionForm","layout","name","initialValues","onFinish","values","username","password","url","options","keepalive","protocolId","protocolVersion","clean","reconnectPeriod","connectTimeout","will","topic","payload","qos","retain","rejectUnauthorized","gutter","span","Item","label","title","actions","type","onClick","submit","danger","Publisher","deviceID","publish","qosOptions","useContext","QosOption","PublishForm","TextArea","offset","style","textAlign","htmlType","Subscriber","sub","unSub","showUnsub","SubForm","marginLeft","getFieldsValue","Receiver","deviceIP","useState","messages","setMessages","useEffect","size","bordered","dataSource","renderItem","item","Meta","description","message","createContext","qosOption","value","HookMqtt","userInfo","client","setClient","isSubed","setIsSub","setPayload","connectStatus","setConnectStatus","on","err","console","error","end","mqttOption","mqtt","href","color","Provider","subscription","subscribe","log","unsubscribe","context","UserData","props","uibuilder","start","state","feVersion","get","socketConnectedState","serverTimeOffset","msgRecvd","msgsReceived","msgCtrl","msgsControl","msgSent","msgsSent","msgCtrlSent","msgsCtrlSent","onChange","newVal","setState","JSON","parse","stringify","ip","handleMsgReceived","info","window","setTimeout","send","ref","height","className","this","Component","App","setUserInfo","bind","id","isInjected","length","Hook","React","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.77f108cf.chunk.js","sourcesContent":["import React from 'react';\nimport { Card, Button, Form, Input, Row, Col } from 'antd';\n\nconst Connection = ({ connect, disconnect, connectBtn }) => {\n  const [form] = Form.useForm();\n  const record = {\n    host: '192.168.0.43',\n    clientId: `mqttjs_ + ${Math.random().toString(16).substr(2, 8)}`,\n    port: 9001,\n  };\n  const onFinish = (values) => {\n    const { host, clientId, port, username, password } = values;\n    const url = `ws://${host}:${port}/mqtt`;\n    const options = {\n      keepalive: 30,\n      protocolId: 'MQTT',\n      protocolVersion: 4,\n      clean: true,\n      reconnectPeriod: 1000,\n      connectTimeout: 30 * 1000,\n      will: {\n        topic: 'WillMsg',\n        payload: 'Connection Closed abnormally..!',\n        qos: 0,\n        retain: false\n      },\n      rejectUnauthorized: false\n    };\n    options.clientId = clientId;\n    options.username = username;\n    options.password = password;\n    connect(url, options);\n  };\n\n  const handleConnect = () => {\n    form.submit();\n  };\n\n  const handleDisconnect = () => {\n    disconnect();\n  };\n\n  const ConnectionForm = (\n    <Form\n      layout=\"vertical\"\n      name=\"basic\"\n      form={form}\n      initialValues={record}\n      onFinish={onFinish}\n    >\n      <Row gutter={20}>\n        <Col span={8}>\n          <Form.Item\n            label=\"Host\"\n            name=\"host\"\n          >\n            <Input />\n          </Form.Item>\n        </Col>\n        <Col span={8}>\n          <Form.Item\n            label=\"Port\"\n            name=\"port\"\n          >\n            <Input />\n          </Form.Item>\n        </Col>\n        <Col span={8}>\n          <Form.Item\n            label=\"Client ID\"\n            name=\"clientId\"\n          >\n            <Input />\n          </Form.Item>\n        </Col>\n \n      </Row>\n    </Form>\n  )\n\n  return (\n    <Card\n      title=\"Connection\"\n      actions={[\n        <Button type=\"primary\" onClick={handleConnect}>{connectBtn}</Button>,\n        <Button danger onClick={handleDisconnect}>Disconnect</Button>\n      ]}\n    >\n      {ConnectionForm}\n    </Card>\n  );\n}\n\nexport default Connection;\n","import React, { useContext } from 'react';\nimport { Card, Form, Input, Row, Col, Button, Select } from 'antd';\nimport { QosOption } from './index'\n\nconst Publisher = ({ deviceID,publish }) => {\n  const [form] = Form.useForm();\n  const qosOptions = useContext(QosOption);\n\n  const record = {\n    topic: '/devices/' + deviceID +'/control',\n    payload: 'stop',\n    qos: 0,\n  };\n\n  const onFinish = (values) => {\n    publish(values)\n  };\n\n  const PublishForm = (\n    <Form\n      layout=\"vertical\"\n      name=\"basic\"\n      form={form}\n      initialValues={record}\n      onFinish={onFinish}\n    >\n      <Row gutter={20}>\n        <Col span={12}>\n          <Form.Item\n            label=\"Topic\"\n            name=\"topic\"\n          >\n            <Input />\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item\n            label=\"QoS\"\n            name=\"qos\"\n          >\n            <Select options={qosOptions} />\n          </Form.Item>\n        </Col>\n        <Col span={24}>\n          <Form.Item\n            label=\"Payload\"\n            name=\"payload\"\n          >\n            <Input.TextArea />\n          </Form.Item>\n        </Col>\n        <Col span={8} offset={16} style={{ textAlign: 'right' }}>\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Publish\n            </Button>\n          </Form.Item>\n        </Col>\n      </Row>\n    </Form>\n  )\n\n  return (\n    <Card\n      title=\"Publisher\"\n    >\n      {PublishForm}\n    </Card>\n  );\n}\n\nexport default Publisher;\n","import React, { useContext } from 'react';\nimport { Card, Form, Input, Row, Col, Button, Select } from 'antd';\nimport { QosOption } from './index'\n\nconst Subscriber = ({ deviceID, sub, unSub, showUnsub }) => {\n  const [form] = Form.useForm();\n  const qosOptions = useContext(QosOption);\n\n  const record = {\n    topic: '/devices/'+ deviceID +'/reading',\n    qos: 0,\n  };\n\n  const onFinish = (values) => {\n    sub(values);\n  };\n\n  const handleUnsub = () => {\n    const values = form.getFieldsValue();\n    unSub(values);\n  };\n\n  const SubForm = (\n    <Form\n      layout=\"vertical\"\n      name=\"basic\"\n      form={form}\n      initialValues={record}\n      onFinish={onFinish}\n    >\n      <Row gutter={20}>\n        <Col span={12}>\n          <Form.Item\n            label=\"Topic\"\n            name=\"topic\"\n          >\n            <Input />\n          </Form.Item>\n        </Col>\n        <Col span={12}>\n          <Form.Item\n            label=\"QoS\"\n            name=\"qos\"\n          >\n            <Select options={qosOptions} />\n          </Form.Item>\n        </Col>\n        <Col span={8} offset={16} style={{ textAlign: 'right' }}>\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Subscribe\n            </Button>\n            {\n              showUnsub ?\n                <Button type=\"danger\" style={{ marginLeft: '10px' }} onClick={handleUnsub}>\n                  Unsubscribe\n                </Button>\n                : null\n            }\n          </Form.Item>\n        </Col>\n      </Row>\n    </Form>\n  )\n\n  return (\n    <Card\n      title=\"Subscriber\"\n    >\n      {SubForm}\n    </Card>\n  );\n}\n\nexport default Subscriber;\n","import React, { useEffect, useState } from 'react';\nimport { Card, List } from 'antd';\n\nconst Receiver = ({ deviceIP,payload }) => {\n  const [messages, setMessages] = useState([])\n\n  useEffect(() => {\n    if (payload.topic) {\n      setMessages(messages => [...messages, payload])\n    }\n  }, [payload])\n\n  const renderListItem = (item) => (\n    <List.Item>\n      <List.Item.Meta\n        title={item.topic}\n        description={item.message}\n      />\n    </List.Item>\n  )\n\n  return (\n    <Card\n      title=\"Receiver\"\n    >\n      <p>Device IP: {deviceIP} </p>\n      <button onClick= {() => setMessages([])}> Clear </button>\n\n      <List\n        size=\"small\"\n        bordered\n        dataSource={messages}\n        renderItem={renderListItem}\n      />\n\n    </Card>\n  );\n}\n\nexport default Receiver;\n","import React, { createContext, useEffect, useState } from 'react';\nimport Connection from './Connection';\nimport Publisher from './Publisher';\nimport Subscriber from './Subscriber';\nimport Receiver from './Receiver';\nimport mqtt from 'mqtt';\n\nexport const QosOption = createContext([])\nconst qosOption = [\n  {\n    label: '0',\n    value: 0,\n  }, {\n    label: '1',\n    value: 1,\n  }, {\n    label: '2',\n    value: 2,\n  },\n];\n\nconst HookMqtt = ({userInfo}) => {\n  const [client, setClient] = useState(null);\n  const [isSubed, setIsSub] = useState(false);\n  const [payload, setPayload] = useState({});\n  const [connectStatus, setConnectStatus] = useState('Connect');\n\n  const mqttConnect = (host, mqttOption) => {\n    setConnectStatus('Connecting');\n    setClient(mqtt.connect(host, mqttOption));\n  };\n\n  useEffect(() => {\n    if (client) {\n      client.on('connect', () => {\n        setConnectStatus('Connected');\n      });\n      client.on('error', (err) => {\n        console.error('Connection error: ', err);\n        client.end();\n      });\n      client.on('reconnect', () => {\n        setConnectStatus('Reconnecting');\n      });\n      client.on('message', (topic, message) => {\n        const payload = { topic, message: message.toString() };\n        setPayload(payload);\n      });\n    }\n  }, [client]);\n\n  const mqttDisconnect = () => {\n    if (client) {\n      client.end(() => {\n        setConnectStatus('Connect');\n      });\n    }\n  }\n\n  const mqttPublish = (context) => {\n    if (client) {\n      const { topic, qos, payload } = context;\n      client.publish(topic, payload, { qos }, error => {\n        if (error) {\n          console.log('Publish error: ', error);\n        }\n      });\n    }\n  }\n\n  const mqttSub = (subscription) => {\n    if (client) {\n      const { topic, qos } = subscription;\n      client.subscribe(topic, { qos }, (error) => {\n        if (error) {\n          console.log('Subscribe to topics error', error)\n          return\n        }\n        setIsSub(true)\n      });\n    }\n  };\n\n  const mqttUnSub = (subscription) => {\n    if (client) {\n      const { topic } = subscription;\n      client.unsubscribe(topic, error => {\n        if (error) {\n          console.log('Unsubscribe error', error)\n          return\n        }\n        setIsSub(false);\n      });\n    }\n  };\n\n  return (\n    <>\n      <Connection connect={mqttConnect} disconnect={mqttDisconnect} connectBtn={connectStatus} />\n      <p>Device ID:{userInfo.deviceID}</p>\n      <a href=\"http://192.168.0.43:1880/ui\" style={{color:'red'}}><h1>Go Home</h1></a>\n      <QosOption.Provider value={qosOption}>\n        <Subscriber deviceID={userInfo.deviceID} sub={mqttSub} unSub={mqttUnSub} showUnsub={isSubed} />\n        <Publisher deviceID={userInfo.deviceID} publish={mqttPublish} />\n      </QosOption.Provider>\n      <Receiver deviceIP={userInfo.deviceIP} payload={payload}/>\n    </>\n  );\n}\n\nexport default HookMqtt;\n","/* This is where the uibuilder action happens */\nimport React, {Component} from 'react';\n//import ReactDOM from 'react-dom';\n//import { findDOMNode } from 'react-dom';\n\nimport uibuilder from 'node-red-contrib-uibuilder/front-end/src/uibuilderfe'\n\nclass UserData extends Component {\n    constructor(props) {\n        super(props)\n\n        /** **REQUIRED** Start uibuilder comms with Node-RED @since v2.0.0-dev3\n         * Pass the namespace and ioPath variables if hosting page is not in the instance root folder\n         * e.g. If you get continual `uibuilderfe:ioSetup: SOCKET CONNECT ERROR` error messages.\n         * e.g. uibuilder.start('/nr/uib', '/nr/uibuilder/vendor/socket.io') // change to use your paths/names\n         */\n        uibuilder.start();\n\n        this.state = {\n            // Example of retrieving data from uibuilder\n            feVersion: uibuilder.get('version'),\n\n            socketConnectedState: false,\n            serverTimeOffset: '[unknown]',\n\n            msgRecvd: {},// {topic: \"192.168.0.35\", payload:\"FP560_123456\",_socketId:\"kkkop\",_msgid: \"977yhh\"},\n            msgsReceived: 0,\n            msgCtrl: '[Nothing]',\n            msgsControl: 0,\n\n            msgSent: '[Nothing]',\n            msgsSent: 0,\n            msgCtrlSent: '[Nothing]',\n            msgsCtrlSent: 0,\n        }\n\n        /** You can use the following to help trace how messages flow back and forth.\n         * You can then amend this processing to suite your requirements.\n         */\n\n        //#region ---- Trace Received Messages ---- //\n        // If msg changes - msg is updated when a standard msg is received from Node-RED over Socket.IO\n        // newVal relates to the attribute being listened to.\n        uibuilder.onChange('msg', (newVal) => {\n\n            this.setState({'msgRecvd': newVal});\n            const {ip, payload} = JSON.parse(JSON.stringify(newVal));\n            this.props.handleMsgReceived(payload.toString(),ip.toString());\n            console.info('[uibuilder.onChange] msg received from Node-RED server:', newVal);\n        })\n\n        // As we receive new messages, we get an updated count as well\n        uibuilder.onChange('msgsReceived', (newVal) => {\n            console.info('[uibuilder.onChange] Updated count of received msgs:', newVal);\n\n            this.setState({'msgsReceived': newVal});\n\n        })\n\n        // If we receive a control message from Node-RED, we can get the new data here - we pass it to a Vue variable\n        uibuilder.onChange('ctrlMsg', (newVal) => {\n            console.info('[uibuilder.onChange:ctrlMsg] CONTROL msg received from Node-RED server:', newVal);\n\n            this.setState({'msgCtrl': newVal});\n        })\n        // Updated count of control messages received\n        uibuilder.onChange('msgsCtrl', (newVal) => {\n            console.info('[uibuilder.onChange:msgsCtrl] Updated count of received CONTROL msgs:', newVal);\n\n            this.setState({'msgsControl': newVal});\n        })\n        //#endregion ---- End of Trace Received Messages ---- //\n\n        //#region ---- Trace Sent Messages ---- //\n        // You probably only need these to help you understand the order of processing //\n        // If a message is sent back to Node-RED, we can grab a copy here if we want to\n        uibuilder.onChange('sentMsg', (newVal) => {\n            console.info('[uibuilder.onChange:sentMsg] msg sent to Node-RED server:', newVal);\n\n            this.setState({'msgSent': newVal});\n        })\n        // Updated count of sent messages\n        uibuilder.onChange('msgsSent', (newVal) => {\n            console.info('[uibuilder.onChange:msgsSent] Updated count of msgs sent:', newVal);\n\n            this.setState({'msgsSent': newVal});\n        })\n\n        // If we send a control message to Node-RED, we can get a copy of it here\n        uibuilder.onChange('sentCtrlMsg', (newVal) => {\n            console.info('[uibuilder.onChange:sentCtrlMsg] Control message sent to Node-RED server:', newVal);\n\n            this.setState({'msgCtrlSent': newVal});\n        })\n        // And we can get an updated count\n        uibuilder.onChange('msgsSentCtrl', (newVal) => {\n            console.info('[uibuilder.onChange:msgsSentCtrl] Updated count of CONTROL msgs sent:', newVal);\n\n            this.setState({'msgsCtrlSent': newVal});\n        })\n        //#endregion ---- End of Trace Sent Messages ---- //\n\n        // If Socket.IO connects/disconnects, we get true/false here\n        uibuilder.onChange('ioConnected', (newVal) => {\n            console.info('[uibuilder.onChange:ioConnected] Socket.IO Connection Status Changed to:', newVal)\n\n            this.setState({'socketConnectedState': newVal})\n        })\n        // If Server Time Offset changes\n        uibuilder.onChange('serverTimeOffset', (newVal) => {\n            console.info('[uibuilder.onChange:serverTimeOffset] Offset of time between the browser and the server has changed to:', newVal)\n\n            this.setState({'serverTimeOffset': newVal})\n        })\n\n        //Manually send a message back to Node-RED after 2 seconds\n        window.setTimeout(function () {\n            console.info('Sending a message back to Node-RED-after2sdelay')\n            uibuilder.send({'topic': 'uibuilderfe', 'payload': 'I am a message sent from the uibuilder front end'})\n        }, 2000)\n    }\n/*\n    componentDidMount() {\n        this.props.handleMsgReceived(this.state.msgRecvd.payload,this.state.msgRecvd.topic);\n    }\n*/\n    render() {\n        return (\n\n            <div ref=\"root\" style={{height: \"50vh\"}}>\n                <h1>Waiting for device information...</h1>\n                <hr></hr>\n                <div className=\"d1\">\n                    <div>Last msg Received:</div>\n                    <pre><code>{JSON.stringify(this.state.msgRecvd, null, 2)}</code></pre>\n                    <div># Msgs Received: {this.state.msgsReceived}</div>\n                </div>\n\n                <div className=\"d1\">\n                    <div>last Ctl Msg Received:</div>\n                    <pre><code>{JSON.stringify(this.state.msgCtrl, null, 2)}</code></pre>\n                    <div># Control Msgs Received: {this.state.msgsControl}</div>\n                </div>\n\n                <div className=\"d1\">\n                    <div>last Msg Sent</div>\n                    <pre><code>{JSON.stringify(this.state.msgSent, null, 2)}</code></pre>\n                    <div># msgs Sent: {this.state.msgsSent}</div>\n                </div>\n\n                <div className=\"d1\">\n                    <div>Socket Connected?: {this.state.socketConnectedState}</div>\n                    <div>uibuilderfe Version: {this.state.feVersion}</div>\n                    <div>Server Time Offset from browser: {this.state.serverTimeOffset}</div>\n                </div>\n\n            </div>\n        );\n\n    }\n\n}\n\nexport default UserData\n\n\n","import React from 'react';\nimport HookMqtt from './components/Hook/'\n// Hook or Class\n// import ClassMqtt from './components/Class/'\nimport './App.css';\n// Import uibuilder enabled component\nimport UserData from './scenes/UserData';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    // First the Parent creates a state for what will be passed\n    this.state = { deviceID: '', deviceIP: ''};\n    this.setUserInfo = this.setUserInfo.bind(this);\n  }\n  // A method is provided for the child component to update the state of the\n  // userInfo\n  setUserInfo(id, ip) {\n    this.setState({deviceID:id, deviceIP:ip});\n  }\n \n  render() {\n    const isInjected = this.state.deviceID.length > 0;\n    return (\n      <div className=\"App\">\n      {isInjected\n        ? <HookMqtt userInfo={this.state} />  \n        : <UserData title=\"User Data\" handleMsgReceived={this.setUserInfo} ></UserData>\n      }\n\n      </div>\n    );\n  }\n};\n//function App() {\n  //return (\n    //<div className=\"App\">\n      //<HookMqtt />      \n      //{/* THIS IS THE UIBUILDER COMPONENT */}\n      //<UserData title=\"User Data\"></UserData>     \n      //{/* Hook or Class */}\n      //{/* <ClassMqtt /> */}\n    //</div>\n  //);\n//}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}