{"ast":null,"code":"var _classCallCheck = require(\"/home/r1701/Downloads/react-mqtt-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/r1701/Downloads/react-mqtt-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/home/r1701/Downloads/react-mqtt-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/home/r1701/Downloads/react-mqtt-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar bl = require('bl');\n\nvar EventEmitter = require('events');\n\nvar Packet = require('./packet');\n\nvar constants = require('./constants');\n\nvar debug = require('debug')('mqtt-packet:parser');\n\nvar Parser = /*#__PURE__*/function (_EventEmitter) {\n  \"use strict\";\n\n  _inherits(Parser, _EventEmitter);\n\n  var _super = _createSuper(Parser);\n\n  function Parser() {\n    var _this;\n\n    _classCallCheck(this, Parser);\n\n    _this = _super.call(this);\n    _this.parser = _this.constructor.parser;\n    return _this;\n  }\n\n  _createClass(Parser, [{\n    key: \"_resetState\",\n    value: function _resetState() {\n      debug('_resetState: resetting packet, error, _list, and _stateCounter');\n      this.packet = new Packet();\n      this.error = null;\n      this._list = bl();\n      this._stateCounter = 0;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(buf) {\n      if (this.error) this._resetState();\n\n      this._list.append(buf);\n\n      debug('parse: current state: %s', this._states[this._stateCounter]);\n\n      while ((this.packet.length !== -1 || this._list.length > 0) && this[this._states[this._stateCounter]]() && !this.error) {\n        this._stateCounter++;\n        debug('parse: state complete. _stateCounter is now: %d', this._stateCounter);\n        debug('parse: packet.length: %d, buffer list length: %d', this.packet.length, this._list.length);\n        if (this._stateCounter >= this._states.length) this._stateCounter = 0;\n      }\n\n      debug('parse: exited while loop. packet: %d, buffer list length: %d', this.packet.length, this._list.length);\n      return this._list.length;\n    }\n  }, {\n    key: \"_parseHeader\",\n    value: function _parseHeader() {\n      // There is at least one byte in the buffer\n      var zero = this._list.readUInt8(0);\n\n      this.packet.cmd = constants.types[zero >> constants.CMD_SHIFT];\n      this.packet.retain = (zero & constants.RETAIN_MASK) !== 0;\n      this.packet.qos = zero >> constants.QOS_SHIFT & constants.QOS_MASK;\n      this.packet.dup = (zero & constants.DUP_MASK) !== 0;\n      debug('_parseHeader: packet: %o', this.packet);\n\n      this._list.consume(1);\n\n      return true;\n    }\n  }, {\n    key: \"_parseLength\",\n    value: function _parseLength() {\n      // There is at least one byte in the list\n      var result = this._parseVarByteNum(true);\n\n      if (result) {\n        this.packet.length = result.value;\n\n        this._list.consume(result.bytes);\n      } else {\n        this._emitError(new Error('Invalid length'));\n      }\n\n      debug('_parseLength %d', result.value);\n      return !!result;\n    }\n  }, {\n    key: \"_parsePayload\",\n    value: function _parsePayload() {\n      debug('_parsePayload: payload %O', this._list);\n      var result = false; // Do we have a payload? Do we have enough data to complete the payload?\n      // PINGs have no payload\n\n      if (this.packet.length === 0 || this._list.length >= this.packet.length) {\n        this._pos = 0;\n\n        switch (this.packet.cmd) {\n          case 'connect':\n            this._parseConnect();\n\n            break;\n\n          case 'connack':\n            this._parseConnack();\n\n            break;\n\n          case 'publish':\n            this._parsePublish();\n\n            break;\n\n          case 'puback':\n          case 'pubrec':\n          case 'pubrel':\n          case 'pubcomp':\n            this._parseConfirmation();\n\n            break;\n\n          case 'subscribe':\n            this._parseSubscribe();\n\n            break;\n\n          case 'suback':\n            this._parseSuback();\n\n            break;\n\n          case 'unsubscribe':\n            this._parseUnsubscribe();\n\n            break;\n\n          case 'unsuback':\n            this._parseUnsuback();\n\n            break;\n\n          case 'pingreq':\n          case 'pingresp':\n            // These are empty, nothing to do\n            break;\n\n          case 'disconnect':\n            this._parseDisconnect();\n\n            break;\n\n          case 'auth':\n            this._parseAuth();\n\n            break;\n\n          default:\n            this._emitError(new Error('Not supported'));\n\n        }\n\n        result = true;\n      }\n\n      debug('_parsePayload complete result: %s', result);\n      return result;\n    }\n  }, {\n    key: \"_parseConnect\",\n    value: function _parseConnect() {\n      debug('_parseConnect');\n      var topic; // Will topic\n\n      var payload; // Will payload\n\n      var password; // Password\n\n      var username; // Username\n\n      var flags = {};\n      var packet = this.packet; // Parse protocolId\n\n      var protocolId = this._parseString();\n\n      if (protocolId === null) return this._emitError(new Error('Cannot parse protocolId'));\n\n      if (protocolId !== 'MQTT' && protocolId !== 'MQIsdp') {\n        return this._emitError(new Error('Invalid protocolId'));\n      }\n\n      packet.protocolId = protocolId; // Parse constants version number\n\n      if (this._pos >= this._list.length) return this._emitError(new Error('Packet too short'));\n      packet.protocolVersion = this._list.readUInt8(this._pos);\n\n      if (packet.protocolVersion !== 3 && packet.protocolVersion !== 4 && packet.protocolVersion !== 5) {\n        return this._emitError(new Error('Invalid protocol version'));\n      }\n\n      this._pos++;\n\n      if (this._pos >= this._list.length) {\n        return this._emitError(new Error('Packet too short'));\n      } // Parse connect flags\n\n\n      flags.username = this._list.readUInt8(this._pos) & constants.USERNAME_MASK;\n      flags.password = this._list.readUInt8(this._pos) & constants.PASSWORD_MASK;\n      flags.will = this._list.readUInt8(this._pos) & constants.WILL_FLAG_MASK;\n\n      if (flags.will) {\n        packet.will = {};\n        packet.will.retain = (this._list.readUInt8(this._pos) & constants.WILL_RETAIN_MASK) !== 0;\n        packet.will.qos = (this._list.readUInt8(this._pos) & constants.WILL_QOS_MASK) >> constants.WILL_QOS_SHIFT;\n      }\n\n      packet.clean = (this._list.readUInt8(this._pos) & constants.CLEAN_SESSION_MASK) !== 0;\n      this._pos++; // Parse keepalive\n\n      packet.keepalive = this._parseNum();\n      if (packet.keepalive === -1) return this._emitError(new Error('Packet too short')); // parse properties\n\n      if (packet.protocolVersion === 5) {\n        var properties = this._parseProperties();\n\n        if (Object.getOwnPropertyNames(properties).length) {\n          packet.properties = properties;\n        }\n      } // Parse clientId\n\n\n      var clientId = this._parseString();\n\n      if (clientId === null) return this._emitError(new Error('Packet too short'));\n      packet.clientId = clientId;\n      debug('_parseConnect: packet.clientId: %s', packet.clientId);\n\n      if (flags.will) {\n        if (packet.protocolVersion === 5) {\n          var willProperties = this._parseProperties();\n\n          if (Object.getOwnPropertyNames(willProperties).length) {\n            packet.will.properties = willProperties;\n          }\n        } // Parse will topic\n\n\n        topic = this._parseString();\n        if (topic === null) return this._emitError(new Error('Cannot parse will topic'));\n        packet.will.topic = topic;\n        debug('_parseConnect: packet.will.topic: %s', packet.will.topic); // Parse will payload\n\n        payload = this._parseBuffer();\n        if (payload === null) return this._emitError(new Error('Cannot parse will payload'));\n        packet.will.payload = payload;\n        debug('_parseConnect: packet.will.paylaod: %s', packet.will.payload);\n      } // Parse username\n\n\n      if (flags.username) {\n        username = this._parseString();\n        if (username === null) return this._emitError(new Error('Cannot parse username'));\n        packet.username = username;\n        debug('_parseConnect: packet.username: %s', packet.username);\n      } // Parse password\n\n\n      if (flags.password) {\n        password = this._parseBuffer();\n        if (password === null) return this._emitError(new Error('Cannot parse password'));\n        packet.password = password;\n      } // need for right parse auth packet and self set up\n\n\n      this.settings = packet;\n      debug('_parseConnect: complete');\n      return packet;\n    }\n  }, {\n    key: \"_parseConnack\",\n    value: function _parseConnack() {\n      debug('_parseConnack');\n      var packet = this.packet;\n      if (this._list.length < 2) return null;\n      packet.sessionPresent = !!(this._list.readUInt8(this._pos++) & constants.SESSIONPRESENT_MASK);\n\n      if (this.settings.protocolVersion === 5) {\n        packet.reasonCode = this._list.readUInt8(this._pos++);\n      } else {\n        packet.returnCode = this._list.readUInt8(this._pos++);\n      }\n\n      if (packet.returnCode === -1 || packet.reasonCode === -1) return this._emitError(new Error('Cannot parse return code')); // mqtt 5 properties\n\n      if (this.settings.protocolVersion === 5) {\n        var properties = this._parseProperties();\n\n        if (Object.getOwnPropertyNames(properties).length) {\n          packet.properties = properties;\n        }\n      }\n\n      debug('_parseConnack: complete');\n    }\n  }, {\n    key: \"_parsePublish\",\n    value: function _parsePublish() {\n      debug('_parsePublish');\n      var packet = this.packet;\n      packet.topic = this._parseString();\n      if (packet.topic === null) return this._emitError(new Error('Cannot parse topic')); // Parse messageId\n\n      if (packet.qos > 0) if (!this._parseMessageId()) {\n        return;\n      } // Properties mqtt 5\n\n      if (this.settings.protocolVersion === 5) {\n        var properties = this._parseProperties();\n\n        if (Object.getOwnPropertyNames(properties).length) {\n          packet.properties = properties;\n        }\n      }\n\n      packet.payload = this._list.slice(this._pos, packet.length);\n      debug('_parsePublish: payload from buffer list: %o', packet.payload);\n    }\n  }, {\n    key: \"_parseSubscribe\",\n    value: function _parseSubscribe() {\n      debug('_parseSubscribe');\n      var packet = this.packet;\n      var topic;\n      var options;\n      var qos;\n      var rh;\n      var rap;\n      var nl;\n      var subscription;\n\n      if (packet.qos !== 1) {\n        return this._emitError(new Error('Wrong subscribe header'));\n      }\n\n      packet.subscriptions = [];\n\n      if (!this._parseMessageId()) {\n        return;\n      } // Properties mqtt 5\n\n\n      if (this.settings.protocolVersion === 5) {\n        var properties = this._parseProperties();\n\n        if (Object.getOwnPropertyNames(properties).length) {\n          packet.properties = properties;\n        }\n      }\n\n      while (this._pos < packet.length) {\n        // Parse topic\n        topic = this._parseString();\n        if (topic === null) return this._emitError(new Error('Cannot parse topic'));\n        if (this._pos >= packet.length) return this._emitError(new Error('Malformed Subscribe Payload'));\n        options = this._parseByte();\n        qos = options & constants.SUBSCRIBE_OPTIONS_QOS_MASK;\n        nl = (options >> constants.SUBSCRIBE_OPTIONS_NL_SHIFT & constants.SUBSCRIBE_OPTIONS_NL_MASK) !== 0;\n        rap = (options >> constants.SUBSCRIBE_OPTIONS_RAP_SHIFT & constants.SUBSCRIBE_OPTIONS_RAP_MASK) !== 0;\n        rh = options >> constants.SUBSCRIBE_OPTIONS_RH_SHIFT & constants.SUBSCRIBE_OPTIONS_RH_MASK;\n        subscription = {\n          topic: topic,\n          qos: qos\n        }; // mqtt 5 options\n\n        if (this.settings.protocolVersion === 5) {\n          subscription.nl = nl;\n          subscription.rap = rap;\n          subscription.rh = rh;\n        } // Push pair to subscriptions\n\n\n        debug('_parseSubscribe: push subscription `%s` to subscription', subscription);\n        packet.subscriptions.push(subscription);\n      }\n    }\n  }, {\n    key: \"_parseSuback\",\n    value: function _parseSuback() {\n      debug('_parseSuback');\n      var packet = this.packet;\n      this.packet.granted = [];\n\n      if (!this._parseMessageId()) {\n        return;\n      } // Properties mqtt 5\n\n\n      if (this.settings.protocolVersion === 5) {\n        var properties = this._parseProperties();\n\n        if (Object.getOwnPropertyNames(properties).length) {\n          packet.properties = properties;\n        }\n      } // Parse granted QoSes\n\n\n      while (this._pos < this.packet.length) {\n        this.packet.granted.push(this._list.readUInt8(this._pos++));\n      }\n    }\n  }, {\n    key: \"_parseUnsubscribe\",\n    value: function _parseUnsubscribe() {\n      debug('_parseUnsubscribe');\n      var packet = this.packet;\n      packet.unsubscriptions = []; // Parse messageId\n\n      if (!this._parseMessageId()) {\n        return;\n      } // Properties mqtt 5\n\n\n      if (this.settings.protocolVersion === 5) {\n        var properties = this._parseProperties();\n\n        if (Object.getOwnPropertyNames(properties).length) {\n          packet.properties = properties;\n        }\n      }\n\n      while (this._pos < packet.length) {\n        // Parse topic\n        var topic = this._parseString();\n\n        if (topic === null) return this._emitError(new Error('Cannot parse topic')); // Push topic to unsubscriptions\n\n        debug('_parseUnsubscribe: push topic `%s` to unsubscriptions', topic);\n        packet.unsubscriptions.push(topic);\n      }\n    }\n  }, {\n    key: \"_parseUnsuback\",\n    value: function _parseUnsuback() {\n      debug('_parseUnsuback');\n      var packet = this.packet;\n      if (!this._parseMessageId()) return this._emitError(new Error('Cannot parse messageId')); // Properties mqtt 5\n\n      if (this.settings.protocolVersion === 5) {\n        var properties = this._parseProperties();\n\n        if (Object.getOwnPropertyNames(properties).length) {\n          packet.properties = properties;\n        } // Parse granted QoSes\n\n\n        packet.granted = [];\n\n        while (this._pos < this.packet.length) {\n          this.packet.granted.push(this._list.readUInt8(this._pos++));\n        }\n      }\n    } // parse packets like puback, pubrec, pubrel, pubcomp\n\n  }, {\n    key: \"_parseConfirmation\",\n    value: function _parseConfirmation() {\n      debug('_parseConfirmation: packet.cmd: `%s`', this.packet.cmd);\n      var packet = this.packet;\n\n      this._parseMessageId();\n\n      if (this.settings.protocolVersion === 5) {\n        if (packet.length > 2) {\n          // response code\n          packet.reasonCode = this._parseByte();\n          debug('_parseConfirmation: packet.reasonCode `%d`', packet.reasonCode);\n        }\n\n        if (packet.length > 3) {\n          // properies mqtt 5\n          var properties = this._parseProperties();\n\n          if (Object.getOwnPropertyNames(properties).length) {\n            packet.properties = properties;\n          }\n        }\n      }\n\n      return true;\n    } // parse disconnect packet\n\n  }, {\n    key: \"_parseDisconnect\",\n    value: function _parseDisconnect() {\n      var packet = this.packet;\n      debug('_parseDisconnect');\n\n      if (this.settings.protocolVersion === 5) {\n        // response code\n        packet.reasonCode = this._parseByte(); // properies mqtt 5\n\n        var properties = this._parseProperties();\n\n        if (Object.getOwnPropertyNames(properties).length) {\n          packet.properties = properties;\n        }\n      }\n\n      debug('_parseDisconnect result: true');\n      return true;\n    } // parse auth packet\n\n  }, {\n    key: \"_parseAuth\",\n    value: function _parseAuth() {\n      debug('_parseAuth');\n      var packet = this.packet;\n\n      if (this.settings.protocolVersion !== 5) {\n        return this._emitError(new Error('Not supported auth packet for this version MQTT'));\n      } // response code\n\n\n      packet.reasonCode = this._parseByte(); // properies mqtt 5\n\n      var properties = this._parseProperties();\n\n      if (Object.getOwnPropertyNames(properties).length) {\n        packet.properties = properties;\n      }\n\n      debug('_parseAuth: result: true');\n      return true;\n    }\n  }, {\n    key: \"_parseMessageId\",\n    value: function _parseMessageId() {\n      var packet = this.packet;\n      packet.messageId = this._parseNum();\n\n      if (packet.messageId === null) {\n        this._emitError(new Error('Cannot parse messageId'));\n\n        return false;\n      }\n\n      debug('_parseMessageId: packet.messageId %d', packet.messageId);\n      return true;\n    }\n  }, {\n    key: \"_parseString\",\n    value: function _parseString(maybeBuffer) {\n      var length = this._parseNum();\n\n      var end = length + this._pos;\n      if (length === -1 || end > this._list.length || end > this.packet.length) return null;\n\n      var result = this._list.toString('utf8', this._pos, end);\n\n      this._pos += length;\n      debug('_parseString: result: %s', result);\n      return result;\n    }\n  }, {\n    key: \"_parseStringPair\",\n    value: function _parseStringPair() {\n      debug('_parseStringPair');\n      return {\n        name: this._parseString(),\n        value: this._parseString()\n      };\n    }\n  }, {\n    key: \"_parseBuffer\",\n    value: function _parseBuffer() {\n      var length = this._parseNum();\n\n      var end = length + this._pos;\n      if (length === -1 || end > this._list.length || end > this.packet.length) return null;\n\n      var result = this._list.slice(this._pos, end);\n\n      this._pos += length;\n      debug('_parseBuffer: result: %o', result);\n      return result;\n    }\n  }, {\n    key: \"_parseNum\",\n    value: function _parseNum() {\n      if (this._list.length - this._pos < 2) return -1;\n\n      var result = this._list.readUInt16BE(this._pos);\n\n      this._pos += 2;\n      debug('_parseNum: result: %s', result);\n      return result;\n    }\n  }, {\n    key: \"_parse4ByteNum\",\n    value: function _parse4ByteNum() {\n      if (this._list.length - this._pos < 4) return -1;\n\n      var result = this._list.readUInt32BE(this._pos);\n\n      this._pos += 4;\n      debug('_parse4ByteNum: result: %s', result);\n      return result;\n    }\n  }, {\n    key: \"_parseVarByteNum\",\n    value: function _parseVarByteNum(fullInfoFlag) {\n      debug('_parseVarByteNum');\n      var bytes = 0;\n      var mul = 1;\n      var value = 0;\n      var result = false;\n      var current;\n      var padding = this._pos ? this._pos : 0;\n\n      while (bytes < 5) {\n        current = this._list.readUInt8(padding + bytes++);\n        value += mul * (current & constants.VARBYTEINT_MASK);\n        mul *= 0x80;\n\n        if ((current & constants.VARBYTEINT_FIN_MASK) === 0) {\n          result = true;\n          break;\n        }\n\n        if (this._list.length <= bytes) {\n          break;\n        }\n      }\n\n      if (padding) {\n        this._pos += bytes;\n      }\n\n      result = result ? fullInfoFlag ? {\n        bytes: bytes,\n        value: value\n      } : value : false;\n      debug('_parseVarByteNum: result: %o', result);\n      return result;\n    }\n  }, {\n    key: \"_parseByte\",\n    value: function _parseByte() {\n      var result = this._list.readUInt8(this._pos);\n\n      this._pos++;\n      debug('_parseByte: result: %o', result);\n      return result;\n    }\n  }, {\n    key: \"_parseByType\",\n    value: function _parseByType(type) {\n      debug('_parseByType: type: %s', type);\n\n      switch (type) {\n        case 'byte':\n          {\n            return this._parseByte() !== 0;\n          }\n\n        case 'int8':\n          {\n            return this._parseByte();\n          }\n\n        case 'int16':\n          {\n            return this._parseNum();\n          }\n\n        case 'int32':\n          {\n            return this._parse4ByteNum();\n          }\n\n        case 'var':\n          {\n            return this._parseVarByteNum();\n          }\n\n        case 'string':\n          {\n            return this._parseString();\n          }\n\n        case 'pair':\n          {\n            return this._parseStringPair();\n          }\n\n        case 'binary':\n          {\n            return this._parseBuffer();\n          }\n      }\n    }\n  }, {\n    key: \"_parseProperties\",\n    value: function _parseProperties() {\n      debug('_parseProperties');\n\n      var length = this._parseVarByteNum();\n\n      var start = this._pos;\n      var end = start + length;\n      var result = {};\n\n      while (this._pos < end) {\n        var type = this._parseByte();\n\n        var name = constants.propertiesCodes[type];\n\n        if (!name) {\n          this._emitError(new Error('Unknown property'));\n\n          return false;\n        } // user properties process\n\n\n        if (name === 'userProperties') {\n          if (!result[name]) {\n            result[name] = Object.create(null);\n          }\n\n          var currentUserProperty = this._parseByType(constants.propertiesTypes[name]);\n\n          if (result[name][currentUserProperty.name]) {\n            if (Array.isArray(result[name][currentUserProperty.name])) {\n              result[name][currentUserProperty.name].push(currentUserProperty.value);\n            } else {\n              var currentValue = result[name][currentUserProperty.name];\n              result[name][currentUserProperty.name] = [currentValue];\n              result[name][currentUserProperty.name].push(currentUserProperty.value);\n            }\n          } else {\n            result[name][currentUserProperty.name] = currentUserProperty.value;\n          }\n\n          continue;\n        }\n\n        if (result[name]) {\n          if (Array.isArray(result[name])) {\n            result[name].push(this._parseByType(constants.propertiesTypes[name]));\n          } else {\n            result[name] = [result[name]];\n            result[name].push(this._parseByType(constants.propertiesTypes[name]));\n          }\n        } else {\n          result[name] = this._parseByType(constants.propertiesTypes[name]);\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_newPacket\",\n    value: function _newPacket() {\n      debug('_newPacket');\n\n      if (this.packet) {\n        this._list.consume(this.packet.length);\n\n        debug('_newPacket: parser emit packet: packet.cmd: %s, packet.payload: %s, packet.length: %d', this.packet.cmd, this.packet.payload, this.packet.length);\n        this.emit('packet', this.packet);\n      }\n\n      debug('_newPacket: new packet');\n      this.packet = new Packet();\n      this._pos = 0;\n      return true;\n    }\n  }, {\n    key: \"_emitError\",\n    value: function _emitError(err) {\n      debug('_emitError');\n      this.error = err;\n      this.emit('error', err);\n    }\n  }], [{\n    key: \"parser\",\n    value: function parser(opt) {\n      if (!(this instanceof Parser)) return new Parser().parser(opt);\n      this.settings = opt || {};\n      this._states = ['_parseHeader', '_parseLength', '_parsePayload', '_newPacket'];\n\n      this._resetState();\n\n      return this;\n    }\n  }]);\n\n  return Parser;\n}(EventEmitter);\n\nmodule.exports = Parser;","map":{"version":3,"sources":["/home/r1701/Downloads/react-mqtt-master/node_modules/mqtt-packet/parser.js"],"names":["bl","require","EventEmitter","Packet","constants","debug","Parser","parser","constructor","packet","error","_list","_stateCounter","buf","_resetState","append","_states","length","zero","readUInt8","cmd","types","CMD_SHIFT","retain","RETAIN_MASK","qos","QOS_SHIFT","QOS_MASK","dup","DUP_MASK","consume","result","_parseVarByteNum","value","bytes","_emitError","Error","_pos","_parseConnect","_parseConnack","_parsePublish","_parseConfirmation","_parseSubscribe","_parseSuback","_parseUnsubscribe","_parseUnsuback","_parseDisconnect","_parseAuth","topic","payload","password","username","flags","protocolId","_parseString","protocolVersion","USERNAME_MASK","PASSWORD_MASK","will","WILL_FLAG_MASK","WILL_RETAIN_MASK","WILL_QOS_MASK","WILL_QOS_SHIFT","clean","CLEAN_SESSION_MASK","keepalive","_parseNum","properties","_parseProperties","Object","getOwnPropertyNames","clientId","willProperties","_parseBuffer","settings","sessionPresent","SESSIONPRESENT_MASK","reasonCode","returnCode","_parseMessageId","slice","options","rh","rap","nl","subscription","subscriptions","_parseByte","SUBSCRIBE_OPTIONS_QOS_MASK","SUBSCRIBE_OPTIONS_NL_SHIFT","SUBSCRIBE_OPTIONS_NL_MASK","SUBSCRIBE_OPTIONS_RAP_SHIFT","SUBSCRIBE_OPTIONS_RAP_MASK","SUBSCRIBE_OPTIONS_RH_SHIFT","SUBSCRIBE_OPTIONS_RH_MASK","push","granted","unsubscriptions","messageId","maybeBuffer","end","toString","name","readUInt16BE","readUInt32BE","fullInfoFlag","mul","current","padding","VARBYTEINT_MASK","VARBYTEINT_FIN_MASK","type","_parse4ByteNum","_parseStringPair","start","propertiesCodes","create","currentUserProperty","_parseByType","propertiesTypes","Array","isArray","currentValue","emit","err","opt","module","exports"],"mappings":"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","sourcesContent":["const bl = require('bl')\nconst EventEmitter = require('events')\nconst Packet = require('./packet')\nconst constants = require('./constants')\nconst debug = require('debug')('mqtt-packet:parser')\n\nclass Parser extends EventEmitter {\n  constructor () {\n    super()\n    this.parser = this.constructor.parser\n  }\n\n  static parser (opt) {\n    if (!(this instanceof Parser)) return (new Parser()).parser(opt)\n\n    this.settings = opt || {}\n\n    this._states = [\n      '_parseHeader',\n      '_parseLength',\n      '_parsePayload',\n      '_newPacket'\n    ]\n\n    this._resetState()\n    return this\n  }\n\n  _resetState () {\n    debug('_resetState: resetting packet, error, _list, and _stateCounter')\n    this.packet = new Packet()\n    this.error = null\n    this._list = bl()\n    this._stateCounter = 0\n  }\n\n  parse (buf) {\n    if (this.error) this._resetState()\n\n    this._list.append(buf)\n    debug('parse: current state: %s', this._states[this._stateCounter])\n    while ((this.packet.length !== -1 || this._list.length > 0) &&\n      this[this._states[this._stateCounter]]() &&\n      !this.error) {\n      this._stateCounter++\n      debug('parse: state complete. _stateCounter is now: %d', this._stateCounter)\n      debug('parse: packet.length: %d, buffer list length: %d', this.packet.length, this._list.length)\n      if (this._stateCounter >= this._states.length) this._stateCounter = 0\n    }\n    debug('parse: exited while loop. packet: %d, buffer list length: %d', this.packet.length, this._list.length)\n    return this._list.length\n  }\n\n  _parseHeader () {\n    // There is at least one byte in the buffer\n    const zero = this._list.readUInt8(0)\n    this.packet.cmd = constants.types[zero >> constants.CMD_SHIFT]\n    this.packet.retain = (zero & constants.RETAIN_MASK) !== 0\n    this.packet.qos = (zero >> constants.QOS_SHIFT) & constants.QOS_MASK\n    this.packet.dup = (zero & constants.DUP_MASK) !== 0\n    debug('_parseHeader: packet: %o', this.packet)\n\n    this._list.consume(1)\n\n    return true\n  }\n\n  _parseLength () {\n    // There is at least one byte in the list\n    const result = this._parseVarByteNum(true)\n\n    if (result) {\n      this.packet.length = result.value\n      this._list.consume(result.bytes)\n    } else {\n      this._emitError(new Error('Invalid length'))\n    }\n    debug('_parseLength %d', result.value)\n    return !!result\n  }\n\n  _parsePayload () {\n    debug('_parsePayload: payload %O', this._list)\n    let result = false\n\n    // Do we have a payload? Do we have enough data to complete the payload?\n    // PINGs have no payload\n    if (this.packet.length === 0 || this._list.length >= this.packet.length) {\n      this._pos = 0\n\n      switch (this.packet.cmd) {\n        case 'connect':\n          this._parseConnect()\n          break\n        case 'connack':\n          this._parseConnack()\n          break\n        case 'publish':\n          this._parsePublish()\n          break\n        case 'puback':\n        case 'pubrec':\n        case 'pubrel':\n        case 'pubcomp':\n          this._parseConfirmation()\n          break\n        case 'subscribe':\n          this._parseSubscribe()\n          break\n        case 'suback':\n          this._parseSuback()\n          break\n        case 'unsubscribe':\n          this._parseUnsubscribe()\n          break\n        case 'unsuback':\n          this._parseUnsuback()\n          break\n        case 'pingreq':\n        case 'pingresp':\n          // These are empty, nothing to do\n          break\n        case 'disconnect':\n          this._parseDisconnect()\n          break\n        case 'auth':\n          this._parseAuth()\n          break\n        default:\n          this._emitError(new Error('Not supported'))\n      }\n\n      result = true\n    }\n    debug('_parsePayload complete result: %s', result)\n    return result\n  }\n\n  _parseConnect () {\n    debug('_parseConnect')\n    let topic // Will topic\n    let payload // Will payload\n    let password // Password\n    let username // Username\n    const flags = {}\n    const packet = this.packet\n\n    // Parse protocolId\n    const protocolId = this._parseString()\n\n    if (protocolId === null) return this._emitError(new Error('Cannot parse protocolId'))\n    if (protocolId !== 'MQTT' && protocolId !== 'MQIsdp') {\n      return this._emitError(new Error('Invalid protocolId'))\n    }\n\n    packet.protocolId = protocolId\n\n    // Parse constants version number\n    if (this._pos >= this._list.length) return this._emitError(new Error('Packet too short'))\n\n    packet.protocolVersion = this._list.readUInt8(this._pos)\n\n    if (packet.protocolVersion !== 3 && packet.protocolVersion !== 4 && packet.protocolVersion !== 5) {\n      return this._emitError(new Error('Invalid protocol version'))\n    }\n\n    this._pos++\n\n    if (this._pos >= this._list.length) {\n      return this._emitError(new Error('Packet too short'))\n    }\n\n    // Parse connect flags\n    flags.username = (this._list.readUInt8(this._pos) & constants.USERNAME_MASK)\n    flags.password = (this._list.readUInt8(this._pos) & constants.PASSWORD_MASK)\n    flags.will = (this._list.readUInt8(this._pos) & constants.WILL_FLAG_MASK)\n\n    if (flags.will) {\n      packet.will = {}\n      packet.will.retain = (this._list.readUInt8(this._pos) & constants.WILL_RETAIN_MASK) !== 0\n      packet.will.qos = (this._list.readUInt8(this._pos) &\n        constants.WILL_QOS_MASK) >> constants.WILL_QOS_SHIFT\n    }\n\n    packet.clean = (this._list.readUInt8(this._pos) & constants.CLEAN_SESSION_MASK) !== 0\n    this._pos++\n\n    // Parse keepalive\n    packet.keepalive = this._parseNum()\n    if (packet.keepalive === -1) return this._emitError(new Error('Packet too short'))\n\n    // parse properties\n    if (packet.protocolVersion === 5) {\n      const properties = this._parseProperties()\n      if (Object.getOwnPropertyNames(properties).length) {\n        packet.properties = properties\n      }\n    }\n    // Parse clientId\n    const clientId = this._parseString()\n    if (clientId === null) return this._emitError(new Error('Packet too short'))\n    packet.clientId = clientId\n    debug('_parseConnect: packet.clientId: %s', packet.clientId)\n\n    if (flags.will) {\n      if (packet.protocolVersion === 5) {\n        const willProperties = this._parseProperties()\n        if (Object.getOwnPropertyNames(willProperties).length) {\n          packet.will.properties = willProperties\n        }\n      }\n      // Parse will topic\n      topic = this._parseString()\n      if (topic === null) return this._emitError(new Error('Cannot parse will topic'))\n      packet.will.topic = topic\n      debug('_parseConnect: packet.will.topic: %s', packet.will.topic)\n\n      // Parse will payload\n      payload = this._parseBuffer()\n      if (payload === null) return this._emitError(new Error('Cannot parse will payload'))\n      packet.will.payload = payload\n      debug('_parseConnect: packet.will.paylaod: %s', packet.will.payload)\n    }\n\n    // Parse username\n    if (flags.username) {\n      username = this._parseString()\n      if (username === null) return this._emitError(new Error('Cannot parse username'))\n      packet.username = username\n      debug('_parseConnect: packet.username: %s', packet.username)\n    }\n\n    // Parse password\n    if (flags.password) {\n      password = this._parseBuffer()\n      if (password === null) return this._emitError(new Error('Cannot parse password'))\n      packet.password = password\n    }\n    // need for right parse auth packet and self set up\n    this.settings = packet\n    debug('_parseConnect: complete')\n    return packet\n  }\n\n  _parseConnack () {\n    debug('_parseConnack')\n    const packet = this.packet\n\n    if (this._list.length < 2) return null\n\n    packet.sessionPresent = !!(this._list.readUInt8(this._pos++) & constants.SESSIONPRESENT_MASK)\n    if (this.settings.protocolVersion === 5) {\n      packet.reasonCode = this._list.readUInt8(this._pos++)\n    } else {\n      packet.returnCode = this._list.readUInt8(this._pos++)\n    }\n\n    if (packet.returnCode === -1 || packet.reasonCode === -1) return this._emitError(new Error('Cannot parse return code'))\n    // mqtt 5 properties\n    if (this.settings.protocolVersion === 5) {\n      const properties = this._parseProperties()\n      if (Object.getOwnPropertyNames(properties).length) {\n        packet.properties = properties\n      }\n    }\n    debug('_parseConnack: complete')\n  }\n\n  _parsePublish () {\n    debug('_parsePublish')\n    const packet = this.packet\n    packet.topic = this._parseString()\n\n    if (packet.topic === null) return this._emitError(new Error('Cannot parse topic'))\n\n    // Parse messageId\n    if (packet.qos > 0) if (!this._parseMessageId()) { return }\n\n    // Properties mqtt 5\n    if (this.settings.protocolVersion === 5) {\n      const properties = this._parseProperties()\n      if (Object.getOwnPropertyNames(properties).length) {\n        packet.properties = properties\n      }\n    }\n\n    packet.payload = this._list.slice(this._pos, packet.length)\n    debug('_parsePublish: payload from buffer list: %o', packet.payload)\n  }\n\n  _parseSubscribe () {\n    debug('_parseSubscribe')\n    const packet = this.packet\n    let topic\n    let options\n    let qos\n    let rh\n    let rap\n    let nl\n    let subscription\n\n    if (packet.qos !== 1) {\n      return this._emitError(new Error('Wrong subscribe header'))\n    }\n\n    packet.subscriptions = []\n\n    if (!this._parseMessageId()) { return }\n\n    // Properties mqtt 5\n    if (this.settings.protocolVersion === 5) {\n      const properties = this._parseProperties()\n      if (Object.getOwnPropertyNames(properties).length) {\n        packet.properties = properties\n      }\n    }\n\n    while (this._pos < packet.length) {\n      // Parse topic\n      topic = this._parseString()\n      if (topic === null) return this._emitError(new Error('Cannot parse topic'))\n      if (this._pos >= packet.length) return this._emitError(new Error('Malformed Subscribe Payload'))\n\n      options = this._parseByte()\n      qos = options & constants.SUBSCRIBE_OPTIONS_QOS_MASK\n      nl = ((options >> constants.SUBSCRIBE_OPTIONS_NL_SHIFT) & constants.SUBSCRIBE_OPTIONS_NL_MASK) !== 0\n      rap = ((options >> constants.SUBSCRIBE_OPTIONS_RAP_SHIFT) & constants.SUBSCRIBE_OPTIONS_RAP_MASK) !== 0\n      rh = (options >> constants.SUBSCRIBE_OPTIONS_RH_SHIFT) & constants.SUBSCRIBE_OPTIONS_RH_MASK\n\n      subscription = { topic, qos }\n\n      // mqtt 5 options\n      if (this.settings.protocolVersion === 5) {\n        subscription.nl = nl\n        subscription.rap = rap\n        subscription.rh = rh\n      }\n\n      // Push pair to subscriptions\n      debug('_parseSubscribe: push subscription `%s` to subscription', subscription)\n      packet.subscriptions.push(subscription)\n    }\n  }\n\n  _parseSuback () {\n    debug('_parseSuback')\n    const packet = this.packet\n    this.packet.granted = []\n\n    if (!this._parseMessageId()) { return }\n\n    // Properties mqtt 5\n    if (this.settings.protocolVersion === 5) {\n      const properties = this._parseProperties()\n      if (Object.getOwnPropertyNames(properties).length) {\n        packet.properties = properties\n      }\n    }\n\n    // Parse granted QoSes\n    while (this._pos < this.packet.length) {\n      this.packet.granted.push(this._list.readUInt8(this._pos++))\n    }\n  }\n\n  _parseUnsubscribe () {\n    debug('_parseUnsubscribe')\n    const packet = this.packet\n\n    packet.unsubscriptions = []\n\n    // Parse messageId\n    if (!this._parseMessageId()) { return }\n\n    // Properties mqtt 5\n    if (this.settings.protocolVersion === 5) {\n      const properties = this._parseProperties()\n      if (Object.getOwnPropertyNames(properties).length) {\n        packet.properties = properties\n      }\n    }\n\n    while (this._pos < packet.length) {\n      // Parse topic\n      const topic = this._parseString()\n      if (topic === null) return this._emitError(new Error('Cannot parse topic'))\n\n      // Push topic to unsubscriptions\n      debug('_parseUnsubscribe: push topic `%s` to unsubscriptions', topic)\n      packet.unsubscriptions.push(topic)\n    }\n  }\n\n  _parseUnsuback () {\n    debug('_parseUnsuback')\n    const packet = this.packet\n    if (!this._parseMessageId()) return this._emitError(new Error('Cannot parse messageId'))\n    // Properties mqtt 5\n    if (this.settings.protocolVersion === 5) {\n      const properties = this._parseProperties()\n      if (Object.getOwnPropertyNames(properties).length) {\n        packet.properties = properties\n      }\n      // Parse granted QoSes\n      packet.granted = []\n      while (this._pos < this.packet.length) {\n        this.packet.granted.push(this._list.readUInt8(this._pos++))\n      }\n    }\n  }\n\n  // parse packets like puback, pubrec, pubrel, pubcomp\n  _parseConfirmation () {\n    debug('_parseConfirmation: packet.cmd: `%s`', this.packet.cmd)\n    const packet = this.packet\n\n    this._parseMessageId()\n\n    if (this.settings.protocolVersion === 5) {\n      if (packet.length > 2) {\n        // response code\n        packet.reasonCode = this._parseByte()\n        debug('_parseConfirmation: packet.reasonCode `%d`', packet.reasonCode)\n      }\n\n      if (packet.length > 3) {\n        // properies mqtt 5\n        const properties = this._parseProperties()\n        if (Object.getOwnPropertyNames(properties).length) {\n          packet.properties = properties\n        }\n      }\n    }\n\n    return true\n  }\n\n  // parse disconnect packet\n  _parseDisconnect () {\n    const packet = this.packet\n    debug('_parseDisconnect')\n\n    if (this.settings.protocolVersion === 5) {\n      // response code\n      packet.reasonCode = this._parseByte()\n      // properies mqtt 5\n      const properties = this._parseProperties()\n      if (Object.getOwnPropertyNames(properties).length) {\n        packet.properties = properties\n      }\n    }\n\n    debug('_parseDisconnect result: true')\n    return true\n  }\n\n  // parse auth packet\n  _parseAuth () {\n    debug('_parseAuth')\n    const packet = this.packet\n\n    if (this.settings.protocolVersion !== 5) {\n      return this._emitError(new Error('Not supported auth packet for this version MQTT'))\n    }\n\n    // response code\n    packet.reasonCode = this._parseByte()\n    // properies mqtt 5\n    const properties = this._parseProperties()\n    if (Object.getOwnPropertyNames(properties).length) {\n      packet.properties = properties\n    }\n\n    debug('_parseAuth: result: true')\n    return true\n  }\n\n  _parseMessageId () {\n    const packet = this.packet\n\n    packet.messageId = this._parseNum()\n\n    if (packet.messageId === null) {\n      this._emitError(new Error('Cannot parse messageId'))\n      return false\n    }\n\n    debug('_parseMessageId: packet.messageId %d', packet.messageId)\n    return true\n  }\n\n  _parseString (maybeBuffer) {\n    const length = this._parseNum()\n    const end = length + this._pos\n\n    if (length === -1 || end > this._list.length || end > this.packet.length) return null\n\n    const result = this._list.toString('utf8', this._pos, end)\n    this._pos += length\n    debug('_parseString: result: %s', result)\n    return result\n  }\n\n  _parseStringPair () {\n    debug('_parseStringPair')\n    return {\n      name: this._parseString(),\n      value: this._parseString()\n    }\n  }\n\n  _parseBuffer () {\n    const length = this._parseNum()\n    const end = length + this._pos\n\n    if (length === -1 || end > this._list.length || end > this.packet.length) return null\n\n    const result = this._list.slice(this._pos, end)\n\n    this._pos += length\n    debug('_parseBuffer: result: %o', result)\n    return result\n  }\n\n  _parseNum () {\n    if (this._list.length - this._pos < 2) return -1\n\n    const result = this._list.readUInt16BE(this._pos)\n    this._pos += 2\n    debug('_parseNum: result: %s', result)\n    return result\n  }\n\n  _parse4ByteNum () {\n    if (this._list.length - this._pos < 4) return -1\n\n    const result = this._list.readUInt32BE(this._pos)\n    this._pos += 4\n    debug('_parse4ByteNum: result: %s', result)\n    return result\n  }\n\n  _parseVarByteNum (fullInfoFlag) {\n    debug('_parseVarByteNum')\n    let bytes = 0\n    let mul = 1\n    let value = 0\n    let result = false\n    let current\n    const padding = this._pos ? this._pos : 0\n\n    while (bytes < 5) {\n      current = this._list.readUInt8(padding + bytes++)\n      value += mul * (current & constants.VARBYTEINT_MASK)\n      mul *= 0x80\n\n      if ((current & constants.VARBYTEINT_FIN_MASK) === 0) {\n        result = true\n        break\n      }\n      if (this._list.length <= bytes) {\n        break\n      }\n    }\n\n    if (padding) {\n      this._pos += bytes\n    }\n\n    result = result\n      ? fullInfoFlag ? {\n        bytes,\n        value\n      } : value\n      : false\n\n    debug('_parseVarByteNum: result: %o', result)\n    return result\n  }\n\n  _parseByte () {\n    const result = this._list.readUInt8(this._pos)\n    this._pos++\n    debug('_parseByte: result: %o', result)\n    return result\n  }\n\n  _parseByType (type) {\n    debug('_parseByType: type: %s', type)\n    switch (type) {\n      case 'byte': {\n        return this._parseByte() !== 0\n      }\n      case 'int8': {\n        return this._parseByte()\n      }\n      case 'int16': {\n        return this._parseNum()\n      }\n      case 'int32': {\n        return this._parse4ByteNum()\n      }\n      case 'var': {\n        return this._parseVarByteNum()\n      }\n      case 'string': {\n        return this._parseString()\n      }\n      case 'pair': {\n        return this._parseStringPair()\n      }\n      case 'binary': {\n        return this._parseBuffer()\n      }\n    }\n  }\n\n  _parseProperties () {\n    debug('_parseProperties')\n    const length = this._parseVarByteNum()\n    const start = this._pos\n    const end = start + length\n    const result = {}\n    while (this._pos < end) {\n      const type = this._parseByte()\n      const name = constants.propertiesCodes[type]\n      if (!name) {\n        this._emitError(new Error('Unknown property'))\n        return false\n      }\n      // user properties process\n      if (name === 'userProperties') {\n        if (!result[name]) {\n          result[name] = Object.create(null)\n        }\n        const currentUserProperty = this._parseByType(constants.propertiesTypes[name])\n        if (result[name][currentUserProperty.name]) {\n          if (Array.isArray(result[name][currentUserProperty.name])) {\n            result[name][currentUserProperty.name].push(currentUserProperty.value)\n          } else {\n            const currentValue = result[name][currentUserProperty.name]\n            result[name][currentUserProperty.name] = [currentValue]\n            result[name][currentUserProperty.name].push(currentUserProperty.value)\n          }\n        } else {\n          result[name][currentUserProperty.name] = currentUserProperty.value\n        }\n        continue\n      }\n      if (result[name]) {\n        if (Array.isArray(result[name])) {\n          result[name].push(this._parseByType(constants.propertiesTypes[name]))\n        } else {\n          result[name] = [result[name]]\n          result[name].push(this._parseByType(constants.propertiesTypes[name]))\n        }\n      } else {\n        result[name] = this._parseByType(constants.propertiesTypes[name])\n      }\n    }\n    return result\n  }\n\n  _newPacket () {\n    debug('_newPacket')\n    if (this.packet) {\n      this._list.consume(this.packet.length)\n      debug('_newPacket: parser emit packet: packet.cmd: %s, packet.payload: %s, packet.length: %d', this.packet.cmd, this.packet.payload, this.packet.length)\n      this.emit('packet', this.packet)\n    }\n    debug('_newPacket: new packet')\n    this.packet = new Packet()\n\n    this._pos = 0\n\n    return true\n  }\n\n  _emitError (err) {\n    debug('_emitError')\n    this.error = err\n    this.emit('error', err)\n  }\n}\n\nmodule.exports = Parser\n"]},"metadata":{},"sourceType":"script"}