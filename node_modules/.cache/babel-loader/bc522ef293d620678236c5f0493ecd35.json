{"ast":null,"code":"var _jsxFileName = \"/home/r1701/Downloads/react-mqtt-master/src/scenes/UserData.js\";\n\n/* This is where the uibuilder action happens */\nimport React, { Component } from 'react'; //import ReactDOM from 'react-dom';\n//import { findDOMNode } from 'react-dom';\n\nimport uibuilder from 'node-red-contrib-uibuilder/front-end/src/uibuilderfe';\n\nclass UserData extends Component {\n  constructor(props) {\n    super(props);\n    /** **REQUIRED** Start uibuilder comms with Node-RED @since v2.0.0-dev3\n     * Pass the namespace and ioPath variables if hosting page is not in the instance root folder\n     * e.g. If you get continual `uibuilderfe:ioSetup: SOCKET CONNECT ERROR` error messages.\n     * e.g. uibuilder.start('/nr/uib', '/nr/uibuilder/vendor/socket.io') // change to use your paths/names\n     */\n\n    uibuilder.start();\n    this.state = {\n      // Example of retrieving data from uibuilder\n      feVersion: uibuilder.get('version'),\n      socketConnectedState: false,\n      serverTimeOffset: '[unknown]',\n      msgRecvd: {},\n      //topic: \"192.168.0.35\", payload:\"FP560_123456\",_socketId:\"kkkop\",_msgid: \"977yhh\"},\n      msgsReceived: 0,\n      msgCtrl: '[Nothing]',\n      msgsControl: 0,\n      msgSent: '[Nothing]',\n      msgsSent: 0,\n      msgCtrlSent: '[Nothing]',\n      msgsCtrlSent: 0\n    };\n    /** You can use the following to help trace how messages flow back and forth.\n     * You can then amend this processing to suite your requirements.\n     */\n    //#region ---- Trace Received Messages ---- //\n    // If msg changes - msg is updated when a standard msg is received from Node-RED over Socket.IO\n    // newVal relates to the attribute being listened to.\n\n    uibuilder.onChange('msg', newVal => {\n      this.setState({\n        'msgRecvd': newVal\n      });\n      const {\n        ip,\n        payload\n      } = JSON.parse(JSON.stringify(newVal));\n      this.props.handleMsgReceived(payload.toString(), ip.toString());\n      console.info('[uibuilder.onChange] msg received from Node-RED server:', newVal);\n    }); // As we receive new messages, we get an updated count as well\n\n    uibuilder.onChange('msgsReceived', newVal => {\n      console.info('[uibuilder.onChange] Updated count of received msgs:', newVal);\n      this.setState({\n        'msgsReceived': newVal\n      });\n    }); // If we receive a control message from Node-RED, we can get the new data here - we pass it to a Vue variable\n\n    uibuilder.onChange('ctrlMsg', newVal => {\n      console.info('[uibuilder.onChange:ctrlMsg] CONTROL msg received from Node-RED server:', newVal);\n      this.setState({\n        'msgCtrl': newVal\n      });\n    }); // Updated count of control messages received\n\n    uibuilder.onChange('msgsCtrl', newVal => {\n      console.info('[uibuilder.onChange:msgsCtrl] Updated count of received CONTROL msgs:', newVal);\n      this.setState({\n        'msgsControl': newVal\n      });\n    }); //#endregion ---- End of Trace Received Messages ---- //\n    //#region ---- Trace Sent Messages ---- //\n    // You probably only need these to help you understand the order of processing //\n    // If a message is sent back to Node-RED, we can grab a copy here if we want to\n\n    uibuilder.onChange('sentMsg', newVal => {\n      console.info('[uibuilder.onChange:sentMsg] msg sent to Node-RED server:', newVal);\n      this.setState({\n        'msgSent': newVal\n      });\n    }); // Updated count of sent messages\n\n    uibuilder.onChange('msgsSent', newVal => {\n      console.info('[uibuilder.onChange:msgsSent] Updated count of msgs sent:', newVal);\n      this.setState({\n        'msgsSent': newVal\n      });\n    }); // If we send a control message to Node-RED, we can get a copy of it here\n\n    uibuilder.onChange('sentCtrlMsg', newVal => {\n      console.info('[uibuilder.onChange:sentCtrlMsg] Control message sent to Node-RED server:', newVal);\n      this.setState({\n        'msgCtrlSent': newVal\n      });\n    }); // And we can get an updated count\n\n    uibuilder.onChange('msgsSentCtrl', newVal => {\n      console.info('[uibuilder.onChange:msgsSentCtrl] Updated count of CONTROL msgs sent:', newVal);\n      this.setState({\n        'msgsCtrlSent': newVal\n      });\n    }); //#endregion ---- End of Trace Sent Messages ---- //\n    // If Socket.IO connects/disconnects, we get true/false here\n\n    uibuilder.onChange('ioConnected', newVal => {\n      console.info('[uibuilder.onChange:ioConnected] Socket.IO Connection Status Changed to:', newVal);\n      this.setState({\n        'socketConnectedState': newVal\n      });\n    }); // If Server Time Offset changes\n\n    uibuilder.onChange('serverTimeOffset', newVal => {\n      console.info('[uibuilder.onChange:serverTimeOffset] Offset of time between the browser and the server has changed to:', newVal);\n      this.setState({\n        'serverTimeOffset': newVal\n      });\n    }); //Manually send a message back to Node-RED after 2 seconds\n\n    window.setTimeout(function () {\n      console.info('Sending a message back to Node-RED-after2sdelay');\n      uibuilder.send({\n        'topic': 'uibuilderfe',\n        'payload': 'I am a message sent from the uibuilder front end'\n      });\n    }, 2000);\n  }\n  /*\n      componentDidMount() {\n          this.props.handleMsgReceived(this.state.msgRecvd.payload,this.state.msgRecvd.topic);\n      }\n  */\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: \"root\",\n      style: {\n        height: \"50vh\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 21\n      }\n    }, \"Last msg Received:\"), /*#__PURE__*/React.createElement(\"pre\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"code\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 26\n      }\n    }, JSON.stringify(this.state.msgRecvd, null, 2))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 21\n      }\n    }, \"# Msgs Received: \", this.state.msgsReceived)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 21\n      }\n    }, \"last Ctl Msg Received:\"), /*#__PURE__*/React.createElement(\"pre\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"code\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 26\n      }\n    }, JSON.stringify(this.state.msgCtrl, null, 2))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 21\n      }\n    }, \"# Control Msgs Received: \", this.state.msgsControl)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 21\n      }\n    }, \"last Msg Sent\"), /*#__PURE__*/React.createElement(\"pre\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"code\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 26\n      }\n    }, JSON.stringify(this.state.msgSent, null, 2))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 21\n      }\n    }, \"# msgs Sent: \", this.state.msgsSent)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 21\n      }\n    }, \"Socket Connected?: \", this.state.socketConnectedState), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 21\n      }\n    }, \"uibuilderfe Version: \", this.state.feVersion), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 21\n      }\n    }, \"Server Time Offset from browser: \", this.state.serverTimeOffset)));\n  }\n\n}\n\nexport default UserData;","map":{"version":3,"sources":["/home/r1701/Downloads/react-mqtt-master/src/scenes/UserData.js"],"names":["React","Component","uibuilder","UserData","constructor","props","start","state","feVersion","get","socketConnectedState","serverTimeOffset","msgRecvd","msgsReceived","msgCtrl","msgsControl","msgSent","msgsSent","msgCtrlSent","msgsCtrlSent","onChange","newVal","setState","ip","payload","JSON","parse","stringify","handleMsgReceived","toString","console","info","window","setTimeout","send","render","height"],"mappings":"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","sourcesContent":["/* This is where the uibuilder action happens */\nimport React, {Component} from 'react';\n//import ReactDOM from 'react-dom';\n//import { findDOMNode } from 'react-dom';\n\nimport uibuilder from 'node-red-contrib-uibuilder/front-end/src/uibuilderfe'\n\nclass UserData extends Component {\n    constructor(props) {\n        super(props)\n\n        /** **REQUIRED** Start uibuilder comms with Node-RED @since v2.0.0-dev3\n         * Pass the namespace and ioPath variables if hosting page is not in the instance root folder\n         * e.g. If you get continual `uibuilderfe:ioSetup: SOCKET CONNECT ERROR` error messages.\n         * e.g. uibuilder.start('/nr/uib', '/nr/uibuilder/vendor/socket.io') // change to use your paths/names\n         */\n        uibuilder.start();\n\n        this.state = {\n            // Example of retrieving data from uibuilder\n            feVersion: uibuilder.get('version'),\n\n            socketConnectedState: false,\n            serverTimeOffset: '[unknown]',\n\n            msgRecvd: {},//topic: \"192.168.0.35\", payload:\"FP560_123456\",_socketId:\"kkkop\",_msgid: \"977yhh\"},\n            msgsReceived: 0,\n            msgCtrl: '[Nothing]',\n            msgsControl: 0,\n\n            msgSent: '[Nothing]',\n            msgsSent: 0,\n            msgCtrlSent: '[Nothing]',\n            msgsCtrlSent: 0,\n        }\n\n        /** You can use the following to help trace how messages flow back and forth.\n         * You can then amend this processing to suite your requirements.\n         */\n\n        //#region ---- Trace Received Messages ---- //\n        // If msg changes - msg is updated when a standard msg is received from Node-RED over Socket.IO\n        // newVal relates to the attribute being listened to.\n        uibuilder.onChange('msg', (newVal) => {\n\n            this.setState({'msgRecvd': newVal});\n            const {ip, payload} = JSON.parse(JSON.stringify(newVal));\n            this.props.handleMsgReceived(payload.toString(),ip.toString());\n            console.info('[uibuilder.onChange] msg received from Node-RED server:', newVal);\n        })\n\n        // As we receive new messages, we get an updated count as well\n        uibuilder.onChange('msgsReceived', (newVal) => {\n            console.info('[uibuilder.onChange] Updated count of received msgs:', newVal);\n\n            this.setState({'msgsReceived': newVal});\n\n        })\n\n        // If we receive a control message from Node-RED, we can get the new data here - we pass it to a Vue variable\n        uibuilder.onChange('ctrlMsg', (newVal) => {\n            console.info('[uibuilder.onChange:ctrlMsg] CONTROL msg received from Node-RED server:', newVal);\n\n            this.setState({'msgCtrl': newVal});\n        })\n        // Updated count of control messages received\n        uibuilder.onChange('msgsCtrl', (newVal) => {\n            console.info('[uibuilder.onChange:msgsCtrl] Updated count of received CONTROL msgs:', newVal);\n\n            this.setState({'msgsControl': newVal});\n        })\n        //#endregion ---- End of Trace Received Messages ---- //\n\n        //#region ---- Trace Sent Messages ---- //\n        // You probably only need these to help you understand the order of processing //\n        // If a message is sent back to Node-RED, we can grab a copy here if we want to\n        uibuilder.onChange('sentMsg', (newVal) => {\n            console.info('[uibuilder.onChange:sentMsg] msg sent to Node-RED server:', newVal);\n\n            this.setState({'msgSent': newVal});\n        })\n        // Updated count of sent messages\n        uibuilder.onChange('msgsSent', (newVal) => {\n            console.info('[uibuilder.onChange:msgsSent] Updated count of msgs sent:', newVal);\n\n            this.setState({'msgsSent': newVal});\n        })\n\n        // If we send a control message to Node-RED, we can get a copy of it here\n        uibuilder.onChange('sentCtrlMsg', (newVal) => {\n            console.info('[uibuilder.onChange:sentCtrlMsg] Control message sent to Node-RED server:', newVal);\n\n            this.setState({'msgCtrlSent': newVal});\n        })\n        // And we can get an updated count\n        uibuilder.onChange('msgsSentCtrl', (newVal) => {\n            console.info('[uibuilder.onChange:msgsSentCtrl] Updated count of CONTROL msgs sent:', newVal);\n\n            this.setState({'msgsCtrlSent': newVal});\n        })\n        //#endregion ---- End of Trace Sent Messages ---- //\n\n        // If Socket.IO connects/disconnects, we get true/false here\n        uibuilder.onChange('ioConnected', (newVal) => {\n            console.info('[uibuilder.onChange:ioConnected] Socket.IO Connection Status Changed to:', newVal)\n\n            this.setState({'socketConnectedState': newVal})\n        })\n        // If Server Time Offset changes\n        uibuilder.onChange('serverTimeOffset', (newVal) => {\n            console.info('[uibuilder.onChange:serverTimeOffset] Offset of time between the browser and the server has changed to:', newVal)\n\n            this.setState({'serverTimeOffset': newVal})\n        })\n\n        //Manually send a message back to Node-RED after 2 seconds\n        window.setTimeout(function () {\n            console.info('Sending a message back to Node-RED-after2sdelay')\n            uibuilder.send({'topic': 'uibuilderfe', 'payload': 'I am a message sent from the uibuilder front end'})\n        }, 2000)\n    }\n/*\n    componentDidMount() {\n        this.props.handleMsgReceived(this.state.msgRecvd.payload,this.state.msgRecvd.topic);\n    }\n*/\n    render() {\n        return (\n\n            <div ref=\"root\" style={{height: \"50vh\"}}>\n                <hr></hr>\n                <div className=\"d1\">\n                    <div>Last msg Received:</div>\n                    <pre><code>{JSON.stringify(this.state.msgRecvd, null, 2)}</code></pre>\n                    <div># Msgs Received: {this.state.msgsReceived}</div>\n                </div>\n\n                <div className=\"d1\">\n                    <div>last Ctl Msg Received:</div>\n                    <pre><code>{JSON.stringify(this.state.msgCtrl, null, 2)}</code></pre>\n                    <div># Control Msgs Received: {this.state.msgsControl}</div>\n                </div>\n\n                <div className=\"d1\">\n                    <div>last Msg Sent</div>\n                    <pre><code>{JSON.stringify(this.state.msgSent, null, 2)}</code></pre>\n                    <div># msgs Sent: {this.state.msgsSent}</div>\n                </div>\n\n                <div className=\"d1\">\n                    <div>Socket Connected?: {this.state.socketConnectedState}</div>\n                    <div>uibuilderfe Version: {this.state.feVersion}</div>\n                    <div>Server Time Offset from browser: {this.state.serverTimeOffset}</div>\n                </div>\n\n            </div>\n        );\n\n    }\n\n}\n\nexport default UserData\n\n\n"]},"metadata":{},"sourceType":"module"}