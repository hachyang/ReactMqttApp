{"ast":null,"code":"'use strict';\n\nconst WS = require('ws');\n\nconst debug = require('debug')('mqttjs:ws');\n\nconst duplexify = require('duplexify');\n\nconst Buffer = require('safe-buffer').Buffer;\n\nconst urlModule = require('url');\n\nconst Transform = require('readable-stream').Transform;\n\nlet WSS_OPTIONS = ['rejectUnauthorized', 'ca', 'cert', 'key', 'pfx', 'passphrase']; // eslint-disable-next-line camelcase\n\nconst IS_BROWSER = typeof process !== 'undefined' && process.title === 'browser' || typeof __webpack_require__ === 'function';\n\nfunction buildUrl(opts, client) {\n  let url = opts.protocol + '://' + opts.hostname + ':' + opts.port + opts.path;\n\n  if (typeof opts.transformWsUrl === 'function') {\n    url = opts.transformWsUrl(url, opts, client);\n  }\n\n  return url;\n}\n\nfunction setDefaultOpts(opts) {\n  let options = opts;\n\n  if (!opts.hostname) {\n    options.hostname = 'localhost';\n  }\n\n  if (!opts.port) {\n    if (opts.protocol === 'wss') {\n      options.port = 443;\n    } else {\n      options.port = 80;\n    }\n  }\n\n  if (!opts.path) {\n    options.path = '/';\n  }\n\n  if (!opts.wsOptions) {\n    options.wsOptions = {};\n  }\n\n  if (!IS_BROWSER && opts.protocol === 'wss') {\n    // Add cert/key/ca etc options\n    WSS_OPTIONS.forEach(function (prop) {\n      if (opts.hasOwnProperty(prop) && !opts.wsOptions.hasOwnProperty(prop)) {\n        options.wsOptions[prop] = opts[prop];\n      }\n    });\n  }\n\n  return options;\n}\n\nfunction setDefaultBrowserOpts(opts) {\n  let options = setDefaultOpts(opts);\n\n  if (!options.hostname) {\n    options.hostname = options.host;\n  }\n\n  if (!options.hostname) {\n    // Throwing an error in a Web Worker if no `hostname` is given, because we\n    // can not determine the `hostname` automatically.  If connecting to\n    // localhost, please supply the `hostname` as an argument.\n    if (typeof document === 'undefined') {\n      throw new Error('Could not determine host. Specify host manually.');\n    }\n\n    const parsed = urlModule.parse(document.URL);\n    options.hostname = parsed.hostname;\n\n    if (!options.port) {\n      options.port = parsed.port;\n    }\n  } // objectMode should be defined for logic\n\n\n  if (options.objectMode === undefined) {\n    options.objectMode = !(options.binary === true || options.binary === undefined);\n  }\n\n  return options;\n}\n\nfunction createWebSocket(client, url, opts) {\n  debug('createWebSocket');\n  debug('protocol: ' + opts.protocolId + ' ' + opts.protocolVersion);\n  const websocketSubProtocol = opts.protocolId === 'MQIsdp' && opts.protocolVersion === 3 ? 'mqttv3.1' : 'mqtt';\n  debug('creating new Websocket for url: ' + url + ' and protocol: ' + websocketSubProtocol);\n  let socket = new WS(url, [websocketSubProtocol], opts.wsOptions);\n  return socket;\n}\n\nfunction createBrowserWebSocket(client, opts) {\n  const websocketSubProtocol = opts.protocolId === 'MQIsdp' && opts.protocolVersion === 3 ? 'mqttv3.1' : 'mqtt';\n  let url = buildUrl(opts, client);\n  /* global WebSocket */\n\n  let socket = new WebSocket(url, [websocketSubProtocol]);\n  socket.binaryType = 'arraybuffer';\n  return socket;\n}\n\nfunction streamBuilder(client, opts) {\n  debug('streamBuilder');\n  let options = setDefaultOpts(opts);\n  const url = buildUrl(options, client);\n  let socket = createWebSocket(client, url, options);\n  let webSocketStream = WS.createWebSocketStream(socket, options.wsOptions);\n  webSocketStream.url = url;\n  return webSocketStream;\n}\n\nfunction browserStreamBuilder(client, opts) {\n  debug('browserStreamBuilder');\n  let stream;\n  let options = setDefaultBrowserOpts(opts); // sets the maximum socket buffer size before throttling\n\n  const bufferSize = options.browserBufferSize || 1024 * 512;\n  const bufferTimeout = opts.browserBufferTimeout || 1000;\n  const coerceToBuffer = !opts.objectMode;\n  let socket = createBrowserWebSocket(client, opts);\n  let proxy = buildProxy(opts, socketWriteBrowser, socketEndBrowser);\n\n  if (!opts.objectMode) {\n    proxy._writev = writev;\n  }\n\n  proxy.on('close', () => {\n    socket.close();\n  });\n  const eventListenerSupport = typeof socket.addEventListener === 'undefined'; // was already open when passed in\n\n  if (socket.readyState === socket.OPEN) {\n    stream = proxy;\n  } else {\n    stream = stream = duplexify(undefined, undefined, opts);\n\n    if (!opts.objectMode) {\n      stream._writev = writev;\n    }\n\n    if (eventListenerSupport) {\n      socket.addEventListener('open', onopen);\n    } else {\n      socket.onopen = onopen;\n    }\n  }\n\n  stream.socket = socket;\n\n  if (eventListenerSupport) {\n    socket.addEventListener('close', onclose);\n    socket.addEventListener('error', onerror);\n    socket.addEventListener('message', onmessage);\n  } else {\n    socket.onclose = onclose;\n    socket.onerror = onerror;\n    socket.onmessage = onmessage;\n  } // methods for browserStreamBuilder\n\n\n  function buildProxy(options, socketWrite, socketEnd) {\n    let proxy = new Transform({\n      objectModeMode: options.objectMode\n    });\n    proxy._write = socketWrite;\n    proxy._flush = socketEnd;\n    return proxy;\n  }\n\n  function onopen() {\n    stream.setReadable(proxy);\n    stream.setWritable(proxy);\n    stream.emit('connect');\n  }\n\n  function onclose() {\n    stream.end();\n    stream.destroy();\n  }\n\n  function onerror(err) {\n    stream.destroy(err);\n  }\n\n  function onmessage(event) {\n    let data = event.data;\n    if (data instanceof ArrayBuffer) data = Buffer.from(data);else data = Buffer.from(data, 'utf8');\n    proxy.push(data);\n  } // this is to be enabled only if objectMode is false\n\n\n  function writev(chunks, cb) {\n    const buffers = new Array(chunks.length);\n\n    for (let i = 0; i < chunks.length; i++) {\n      if (typeof chunks[i].chunk === 'string') {\n        buffers[i] = Buffer.from(chunks[i], 'utf8');\n      } else {\n        buffers[i] = chunks[i].chunk;\n      }\n    }\n\n    this._write(Buffer.concat(buffers), 'binary', cb);\n  }\n\n  function socketWriteBrowser(chunk, enc, next) {\n    if (socket.bufferedAmount > bufferSize) {\n      // throttle data until buffered amount is reduced.\n      setTimeout(socketWriteBrowser, bufferTimeout, chunk, enc, next);\n    }\n\n    if (coerceToBuffer && typeof chunk === 'string') {\n      chunk = Buffer.from(chunk, 'utf8');\n    }\n\n    try {\n      socket.send(chunk);\n    } catch (err) {\n      return next(err);\n    }\n\n    next();\n  }\n\n  function socketEndBrowser(done) {\n    socket.close();\n    done();\n  } // end methods for browserStreamBuilder\n\n\n  return stream;\n}\n\nif (IS_BROWSER) {\n  module.exports = browserStreamBuilder;\n} else {\n  module.exports = streamBuilder;\n}","map":{"version":3,"sources":["/home/r1701/Downloads/react-mqtt-master/node_modules/mqtt/lib/connect/ws.js"],"names":["WS","require","debug","duplexify","Buffer","urlModule","Transform","WSS_OPTIONS","IS_BROWSER","process","title","__webpack_require__","buildUrl","opts","client","url","protocol","hostname","port","path","transformWsUrl","setDefaultOpts","options","wsOptions","forEach","prop","hasOwnProperty","setDefaultBrowserOpts","host","document","Error","parsed","parse","URL","objectMode","undefined","binary","createWebSocket","protocolId","protocolVersion","websocketSubProtocol","socket","createBrowserWebSocket","WebSocket","binaryType","streamBuilder","webSocketStream","createWebSocketStream","browserStreamBuilder","stream","bufferSize","browserBufferSize","bufferTimeout","browserBufferTimeout","coerceToBuffer","proxy","buildProxy","socketWriteBrowser","socketEndBrowser","_writev","writev","on","close","eventListenerSupport","addEventListener","readyState","OPEN","onopen","onclose","onerror","onmessage","socketWrite","socketEnd","objectModeMode","_write","_flush","setReadable","setWritable","emit","end","destroy","err","event","data","ArrayBuffer","from","push","chunks","cb","buffers","Array","length","i","chunk","concat","enc","next","bufferedAmount","setTimeout","send","done","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst WS = require('ws')\nconst debug = require('debug')('mqttjs:ws')\nconst duplexify = require('duplexify')\nconst Buffer = require('safe-buffer').Buffer\nconst urlModule = require('url')\nconst Transform = require('readable-stream').Transform\n\nlet WSS_OPTIONS = [\n  'rejectUnauthorized',\n  'ca',\n  'cert',\n  'key',\n  'pfx',\n  'passphrase'\n]\n// eslint-disable-next-line camelcase\nconst IS_BROWSER = (typeof process !== 'undefined' && process.title === 'browser') || typeof __webpack_require__ === 'function'\nfunction buildUrl (opts, client) {\n  let url = opts.protocol + '://' + opts.hostname + ':' + opts.port + opts.path\n  if (typeof (opts.transformWsUrl) === 'function') {\n    url = opts.transformWsUrl(url, opts, client)\n  }\n  return url\n}\n\nfunction setDefaultOpts (opts) {\n  let options = opts\n  if (!opts.hostname) {\n    options.hostname = 'localhost'\n  }\n  if (!opts.port) {\n    if (opts.protocol === 'wss') {\n      options.port = 443\n    } else {\n      options.port = 80\n    }\n  }\n  if (!opts.path) {\n    options.path = '/'\n  }\n\n  if (!opts.wsOptions) {\n    options.wsOptions = {}\n  }\n  if (!IS_BROWSER && opts.protocol === 'wss') {\n    // Add cert/key/ca etc options\n    WSS_OPTIONS.forEach(function (prop) {\n      if (opts.hasOwnProperty(prop) && !opts.wsOptions.hasOwnProperty(prop)) {\n        options.wsOptions[prop] = opts[prop]\n      }\n    })\n  }\n\n  return options\n}\n\nfunction setDefaultBrowserOpts (opts) {\n  let options = setDefaultOpts(opts)\n\n  if (!options.hostname) {\n    options.hostname = options.host\n  }\n\n  if (!options.hostname) {\n    // Throwing an error in a Web Worker if no `hostname` is given, because we\n    // can not determine the `hostname` automatically.  If connecting to\n    // localhost, please supply the `hostname` as an argument.\n    if (typeof (document) === 'undefined') {\n      throw new Error('Could not determine host. Specify host manually.')\n    }\n    const parsed = urlModule.parse(document.URL)\n    options.hostname = parsed.hostname\n\n    if (!options.port) {\n      options.port = parsed.port\n    }\n  }\n\n  // objectMode should be defined for logic\n  if (options.objectMode === undefined) {\n    options.objectMode = !(options.binary === true || options.binary === undefined)\n  }\n\n  return options\n}\n\nfunction createWebSocket (client, url, opts) {\n  debug('createWebSocket')\n  debug('protocol: ' + opts.protocolId + ' ' + opts.protocolVersion)\n  const websocketSubProtocol =\n    (opts.protocolId === 'MQIsdp') && (opts.protocolVersion === 3)\n      ? 'mqttv3.1'\n      : 'mqtt'\n\n  debug('creating new Websocket for url: ' + url + ' and protocol: ' + websocketSubProtocol)\n  let socket = new WS(url, [websocketSubProtocol], opts.wsOptions)\n  return socket\n}\n\nfunction createBrowserWebSocket (client, opts) {\n  const websocketSubProtocol =\n  (opts.protocolId === 'MQIsdp') && (opts.protocolVersion === 3)\n    ? 'mqttv3.1'\n    : 'mqtt'\n\n  let url = buildUrl(opts, client)\n  /* global WebSocket */\n  let socket = new WebSocket(url, [websocketSubProtocol])\n  socket.binaryType = 'arraybuffer'\n  return socket\n}\n\nfunction streamBuilder (client, opts) {\n  debug('streamBuilder')\n  let options = setDefaultOpts(opts)\n  const url = buildUrl(options, client)\n  let socket = createWebSocket(client, url, options)\n  let webSocketStream = WS.createWebSocketStream(socket, options.wsOptions)\n  webSocketStream.url = url\n  return webSocketStream\n}\n\nfunction browserStreamBuilder (client, opts) {\n  debug('browserStreamBuilder')\n  let stream\n  let options = setDefaultBrowserOpts(opts)\n  // sets the maximum socket buffer size before throttling\n  const bufferSize = options.browserBufferSize || 1024 * 512\n\n  const bufferTimeout = opts.browserBufferTimeout || 1000\n\n  const coerceToBuffer = !opts.objectMode\n\n  let socket = createBrowserWebSocket(client, opts)\n\n  let proxy = buildProxy(opts, socketWriteBrowser, socketEndBrowser)\n\n  if (!opts.objectMode) {\n    proxy._writev = writev\n  }\n  proxy.on('close', () => { socket.close() })\n\n  const eventListenerSupport = (typeof socket.addEventListener === 'undefined')\n\n  // was already open when passed in\n  if (socket.readyState === socket.OPEN) {\n    stream = proxy\n  } else {\n    stream = stream = duplexify(undefined, undefined, opts)\n    if (!opts.objectMode) {\n      stream._writev = writev\n    }\n\n    if (eventListenerSupport) {\n      socket.addEventListener('open', onopen)\n    } else {\n      socket.onopen = onopen\n    }\n  }\n\n  stream.socket = socket\n\n  if (eventListenerSupport) {\n    socket.addEventListener('close', onclose)\n    socket.addEventListener('error', onerror)\n    socket.addEventListener('message', onmessage)\n  } else {\n    socket.onclose = onclose\n    socket.onerror = onerror\n    socket.onmessage = onmessage\n  }\n\n  // methods for browserStreamBuilder\n\n  function buildProxy (options, socketWrite, socketEnd) {\n    let proxy = new Transform({\n      objectModeMode: options.objectMode\n    })\n\n    proxy._write = socketWrite\n    proxy._flush = socketEnd\n\n    return proxy\n  }\n\n  function onopen () {\n    stream.setReadable(proxy)\n    stream.setWritable(proxy)\n    stream.emit('connect')\n  }\n\n  function onclose () {\n    stream.end()\n    stream.destroy()\n  }\n\n  function onerror (err) {\n    stream.destroy(err)\n  }\n\n  function onmessage (event) {\n    let data = event.data\n    if (data instanceof ArrayBuffer) data = Buffer.from(data)\n    else data = Buffer.from(data, 'utf8')\n    proxy.push(data)\n  }\n\n  // this is to be enabled only if objectMode is false\n  function writev (chunks, cb) {\n    const buffers = new Array(chunks.length)\n    for (let i = 0; i < chunks.length; i++) {\n      if (typeof chunks[i].chunk === 'string') {\n        buffers[i] = Buffer.from(chunks[i], 'utf8')\n      } else {\n        buffers[i] = chunks[i].chunk\n      }\n    }\n\n    this._write(Buffer.concat(buffers), 'binary', cb)\n  }\n\n  function socketWriteBrowser (chunk, enc, next) {\n    if (socket.bufferedAmount > bufferSize) {\n      // throttle data until buffered amount is reduced.\n      setTimeout(socketWriteBrowser, bufferTimeout, chunk, enc, next)\n    }\n\n    if (coerceToBuffer && typeof chunk === 'string') {\n      chunk = Buffer.from(chunk, 'utf8')\n    }\n\n    try {\n      socket.send(chunk)\n    } catch (err) {\n      return next(err)\n    }\n\n    next()\n  }\n\n  function socketEndBrowser (done) {\n    socket.close()\n    done()\n  }\n\n  // end methods for browserStreamBuilder\n\n  return stream\n}\n\nif (IS_BROWSER) {\n  module.exports = browserStreamBuilder\n} else {\n  module.exports = streamBuilder\n}\n"]},"metadata":{},"sourceType":"script"}